// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241219204728_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.FundamentalData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvestmentInstrumentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentInstrumentId")
                        .IsUnique();

                    b.ToTable("Fundamentals");
                });

            modelBuilder.Entity("Domain.Entities.InvestmentInstrument", b =>
                {
                    b.Property<Guid>("InvestmentInstrumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InvestmentInstrumentId");

                    b.ToTable("InvestmentInstruments");
                });

            modelBuilder.Entity("Domain.Entities.PriceData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<decimal>("High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvestmentInstrumentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentInstrumentId");

                    b.ToTable("PriceDataSet");
                });

            modelBuilder.Entity("Domain.Entities.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Action");

                    b.Property<Guid>("InvestmentInstrumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rationale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Rationale");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RiskLevel");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("Score");

                    b.Property<decimal>("TargetPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("TargetPrice");

                    b.Property<string>("TimeHorizon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TimeHorizon");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentInstrumentId")
                        .IsUnique();

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("Domain.Entities.FundamentalData", b =>
                {
                    b.HasOne("Domain.Entities.InvestmentInstrument", null)
                        .WithOne("FundamentalData")
                        .HasForeignKey("Domain.Entities.FundamentalData", "InvestmentInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.CashFlowMetrics", "CashFlow", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("CurrentFCF")
                                .HasColumnType("numeric")
                                .HasColumnName("CashFlow_CurrentFCF");

                            b1.Property<decimal>("ProjectedFCFGrowth")
                                .HasColumnType("numeric")
                                .HasColumnName("CashFlow_ProjectedFCFGrowth");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.ComparableMetrics", "Comparable", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("PeerEVEBITDA")
                                .HasColumnType("numeric")
                                .HasColumnName("Comp_PeerEVEBITDA");

                            b1.Property<decimal>("SectorAveragePE")
                                .HasColumnType("numeric")
                                .HasColumnName("Comp_SectorAvgPE");

                            b1.Property<decimal>("SectorMedianPB")
                                .HasColumnType("numeric")
                                .HasColumnName("Comp_SectorMedPB");

                            b1.Property<decimal>("SectorPriceSales")
                                .HasColumnType("numeric")
                                .HasColumnName("Comp_SectorPriceSales");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.CostOfCapitalMetrics", "CostOfCapital", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("RequiredReturnOnEquity")
                                .HasColumnType("numeric")
                                .HasColumnName("CostOfCapital_RROE");

                            b1.Property<decimal>("WACC")
                                .HasColumnType("numeric")
                                .HasColumnName("CostOfCapital_WACC");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.DividendMetrics", "Dividend", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("CurrentAnnualDividend")
                                .HasColumnType("numeric")
                                .HasColumnName("Dividend_CurrentAnnual");

                            b1.Property<decimal>("DividendGrowth")
                                .HasColumnType("numeric")
                                .HasColumnName("Dividend_Growth");

                            b1.Property<decimal>("DividendPayoutRatio")
                                .HasColumnType("numeric")
                                .HasColumnName("Dividend_PayoutRatio");

                            b1.Property<decimal>("DividendYield")
                                .HasColumnType("numeric")
                                .HasColumnName("Dividend_Yield");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.EarningsMetrics", "Earnings", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("EBITDA")
                                .HasColumnType("numeric")
                                .HasColumnName("Earnings_EBITDA");

                            b1.Property<decimal>("EPS")
                                .HasColumnType("numeric")
                                .HasColumnName("Earnings_EPS");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.GrowthMetrics", "Growth", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("DividendGrowth")
                                .HasColumnType("numeric")
                                .HasColumnName("Growth_Dividend");

                            b1.Property<decimal>("HistoricalEpsGrowth")
                                .HasColumnType("numeric")
                                .HasColumnName("Growth_HistoricalEps");

                            b1.Property<decimal>("LongTermGrowthRate")
                                .HasColumnType("numeric")
                                .HasColumnName("Growth_LongTerm");

                            b1.Property<decimal>("PredictedEpsGrowth")
                                .HasColumnType("numeric")
                                .HasColumnName("Growth_PredictedEps");

                            b1.Property<decimal>("PredictedFCFGrowth")
                                .HasColumnType("numeric")
                                .HasColumnName("Growth_PredictedFCF");

                            b1.Property<decimal>("ProfitGrowth")
                                .HasColumnType("numeric")
                                .HasColumnName("Growth_Profit");

                            b1.Property<decimal>("RevenueGrowth")
                                .HasColumnType("numeric")
                                .HasColumnName("Growth_Revenue");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.MarketRiskMetrics", "MarketRisk", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Beta")
                                .HasColumnType("numeric")
                                .HasColumnName("MarketRisk_Beta");

                            b1.Property<decimal>("SharpeRatio")
                                .HasColumnType("numeric")
                                .HasColumnName("MarketRisk_SharpeRatio");

                            b1.Property<decimal>("StandardDeviation")
                                .HasColumnType("numeric")
                                .HasColumnName("MarketRisk_StdDev");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.ProfitabilityMetrics", "Profitability", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("GrossMargin")
                                .HasColumnType("numeric")
                                .HasColumnName("Profitability_GrossMargin");

                            b1.Property<decimal>("NetMargin")
                                .HasColumnType("numeric")
                                .HasColumnName("Profitability_NetMargin");

                            b1.Property<decimal>("OperatingMargin")
                                .HasColumnType("numeric")
                                .HasColumnName("Profitability_OperatingMargin");

                            b1.Property<decimal>("ROA")
                                .HasColumnType("numeric")
                                .HasColumnName("Profitability_ROA");

                            b1.Property<decimal>("ROE")
                                .HasColumnType("numeric")
                                .HasColumnName("Profitability_ROE");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.RevenueMetrics", "Revenue", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("SalesPerShare")
                                .HasColumnType("numeric")
                                .HasColumnName("Revenue_SalesPerShare");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.SentimentMetrics", "Sentiment", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AnalystRecommendation")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Sentiment_AnalystRec");

                            b1.Property<decimal>("ConsensusTargetPrice")
                                .HasColumnType("numeric")
                                .HasColumnName("Sentiment_TargetPrice");

                            b1.Property<decimal>("MediaSentimentScore")
                                .HasColumnType("numeric")
                                .HasColumnName("Sentiment_MediaScore");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.StabilityMetrics", "Stability", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("CurrentRatio")
                                .HasColumnType("numeric")
                                .HasColumnName("Stability_CurrentRatio");

                            b1.Property<decimal>("DebtToEquity")
                                .HasColumnType("numeric")
                                .HasColumnName("Stability_DebtToEquity");

                            b1.Property<decimal>("InterestCoverage")
                                .HasColumnType("numeric")
                                .HasColumnName("Stability_InterestCoverage");

                            b1.Property<decimal>("QuickRatio")
                                .HasColumnType("numeric")
                                .HasColumnName("Stability_QuickRatio");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.OwnsOne("Domain.ValueObjects.ValuationMetrics", "Valuation", b1 =>
                        {
                            b1.Property<Guid>("FundamentalDataId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("EV_EBIT")
                                .HasColumnType("numeric")
                                .HasColumnName("Valuation_EVEBIT");

                            b1.Property<decimal>("EV_EBITDA")
                                .HasColumnType("numeric")
                                .HasColumnName("Valuation_EVEBITDA");

                            b1.Property<decimal>("PB")
                                .HasColumnType("numeric")
                                .HasColumnName("Valuation_PB");

                            b1.Property<decimal>("PE")
                                .HasColumnType("numeric")
                                .HasColumnName("Valuation_PE");

                            b1.Property<decimal>("PriceCashFlow")
                                .HasColumnType("numeric")
                                .HasColumnName("Valuation_PriceCashFlow");

                            b1.Property<decimal>("PriceSales")
                                .HasColumnType("numeric")
                                .HasColumnName("Valuation_PriceSales");

                            b1.HasKey("FundamentalDataId");

                            b1.ToTable("Fundamentals");

                            b1.WithOwner()
                                .HasForeignKey("FundamentalDataId");
                        });

                    b.Navigation("CashFlow")
                        .IsRequired();

                    b.Navigation("Comparable")
                        .IsRequired();

                    b.Navigation("CostOfCapital")
                        .IsRequired();

                    b.Navigation("Dividend")
                        .IsRequired();

                    b.Navigation("Earnings")
                        .IsRequired();

                    b.Navigation("Growth")
                        .IsRequired();

                    b.Navigation("MarketRisk")
                        .IsRequired();

                    b.Navigation("Profitability")
                        .IsRequired();

                    b.Navigation("Revenue")
                        .IsRequired();

                    b.Navigation("Sentiment")
                        .IsRequired();

                    b.Navigation("Stability")
                        .IsRequired();

                    b.Navigation("Valuation")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.PriceData", b =>
                {
                    b.HasOne("Domain.Entities.InvestmentInstrument", null)
                        .WithMany("PriceHistory")
                        .HasForeignKey("InvestmentInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Recommendation", b =>
                {
                    b.HasOne("Domain.Entities.InvestmentInstrument", null)
                        .WithOne("CurrentRecommendation")
                        .HasForeignKey("Domain.Entities.Recommendation", "InvestmentInstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.InvestmentInstrument", b =>
                {
                    b.Navigation("CurrentRecommendation")
                        .IsRequired();

                    b.Navigation("FundamentalData")
                        .IsRequired();

                    b.Navigation("PriceHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
