===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor\Program.cs===

using Microsoft.AspNetCore.Hosting;using Microsoft.Extensions.Hosting;using Serilog;using InvestmentAdvisor.Web;namespace InvestmentAdvisor.Web{public class Program{public static void Main(string[] args){Log.Logger=new LoggerConfiguration().WriteTo.Console().CreateLogger();try{Log.Information("Starting web host...");CreateHostBuilder(args).Build().Run();}catch(Exception ex){Log.Fatal(ex,"Host terminated unexpectedly.");}finally{Log.CloseAndFlush();}}public static IHostBuilder CreateHostBuilder(string[] args)=>Host.CreateDefaultBuilder(args).UseSerilog().ConfigureWebHostDefaults(webBuilder=>{webBuilder.UseStartup<Startup>();});}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor\Startup.cs===

using Application.DependencyInjection;using Infrastructure.DependencyInjection;namespace InvestmentAdvisor.Web{public class Startup{public Startup(IConfiguration configuration,ILoggerFactory loggerFactory){Configuration=configuration;LoggerFactory=loggerFactory;}public IConfiguration Configuration{get;}public ILoggerFactory LoggerFactory{get;}public void ConfigureServices(IServiceCollection services){services.AddApplicationServices();services.AddInfrastructureServices(Configuration);services.AddControllers();services.AddEndpointsApiExplorer();services.AddSwaggerGen();}public void Configure(IApplicationBuilder app,IWebHostEnvironment env){if(env.IsDevelopment()){app.UseDeveloperExceptionPage();app.UseSwagger();app.UseSwaggerUI(c=>c.SwaggerEndpoint("/swagger/v1/swagger.json","InvestmentAdvisor API v1"));}app.UseRouting();app.UseAuthorization();app.UseEndpoints(endpoints=>{endpoints.MapControllers();endpoints.MapFallbackToPage("/_Host");});}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor\Web.csproj===

<Project Sdk="Microsoft.NET.Sdk.Web"><PropertyGroup><TargetFramework>net9.0</TargetFramework><Nullable>enable</Nullable><ImplicitUsings>enable</ImplicitUsings><UserSecretsId>9e5cf31a-c422-4d1f-a3af-6dd4031b644d</UserSecretsId><DockerDefaultTargetOS>Linux</DockerDefaultTargetOS><AssemblyName>InvestmentAdvisor.Web</AssemblyName><RootNamespace>InvestmentAdvisor.Web</RootNamespace></PropertyGroup><ItemGroup><PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.0"/><PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.0"/><PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.0"><IncludeAssets>runtime;build;native;contentfiles;analyzers;buildtransitive</IncludeAssets><PrivateAssets>all</PrivateAssets></PackageReference><PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.21.0"/><PackageReference Include="Polly" Version="8.5.0"/><PackageReference Include="Polly.Extensions.Http" Version="3.0.0"/><PackageReference Include="Serilog.AspNetCore" Version="9.0.0"/><PackageReference Include="Swashbuckle.AspNetCore.Swagger" Version="7.2.0"/><PackageReference Include="Swashbuckle.AspNetCore.SwaggerGen" Version="7.2.0"/><PackageReference Include="Swashbuckle.AspNetCore.SwaggerUI" Version="7.2.0"/></ItemGroup><ItemGroup><Folder Include="Controllers\"/></ItemGroup><ItemGroup><ProjectReference Include="..\InvestmentAdvisor.Application\Application.csproj"/><ProjectReference Include="..\InvestmentAdvisor.Infrastructure\Infrastructure.csproj"/></ItemGroup></Project>

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Commands\GetInstrumentQueryHandler.cs===

using Application.DTOs;using Application.Queries;using Domain.Interfaces;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.Commands{public class GetInstrumentQueryHandler : IQueryHandler<GetInstrumentQuery,InstrumentDto?>{private readonly IInvestmentInstrumentRepository _repository;public GetInstrumentQueryHandler(IInvestmentInstrumentRepository repository){_repository=repository;}public async Task<InstrumentDto?>HandleAsync(GetInstrumentQuery query,CancellationToken cancellationToken=default){var instrument=await _repository.GetBySymbolAsync(query.Symbol);if(instrument==null)return null;var lastPrice=instrument.PriceHistory.OrderByDescending(p=>p.Date).FirstOrDefault()?.Close;var recommendation=instrument.CurrentRecommendation?.Action.ToString();return new InstrumentDto{Id=instrument.InvestmentInstrumentId,Symbol=instrument.Symbol,Name=instrument.Name,LastPrice=lastPrice,CurrentRecommendation=recommendation};}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Commands\ICommand.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.Commands{public interface ICommand{}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Commands\ICommandHandler.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.Commands{public interface ICommandHandler<TCommand>where TCommand : ICommand{Task HandleAsync(TCommand command,CancellationToken cancellationToken=default);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Commands\UpdateInstrumentsCommand.cs===

namespace Application.Commands{public class UpdateInstrumentsCommand : ICommand{public List<string>SymbolsToUpdate{get;}public UpdateInstrumentsCommand(List<string>symbols){SymbolsToUpdate=symbols;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Commands\UpdateInstrumentsCommandHandler.cs===

using Domain.Interfaces;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.Commands{public class UpdateInstrumentsCommandHandler : ICommandHandler<UpdateInstrumentsCommand>{private readonly IDataAcquisitionService _dataAcquisitionService;public UpdateInstrumentsCommandHandler(IDataAcquisitionService dataAcquisitionService){_dataAcquisitionService=dataAcquisitionService;}public async Task HandleAsync(UpdateInstrumentsCommand command,CancellationToken cancellationToken=default){foreach(var symbol in command.SymbolsToUpdate){await _dataAcquisitionService.FullUpdateAsync(symbol);}}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\DependencyInjection\ApplicationServicesRegistration.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using Application.Commands;using Application.DTOs;using Application.Queries;using Microsoft.Extensions.DependencyInjection;using System.Reflection;using Domain.Interfaces;using Domain.Services;using Microsoft.Extensions.Configuration;namespace Application.DependencyInjection{public static class ApplicationServicesRegistration{public static IServiceCollection AddApplicationServices(this IServiceCollection services){services.AddScoped<ICommandHandler<UpdateInstrumentsCommand>,Application.Commands.UpdateInstrumentsCommandHandler>();services.AddScoped<IQueryHandler<Application.Queries.GetInstrumentQuery,InstrumentDto?>,Application.Queries.GetInstrumentQueryHandler>();return services;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\DTOs\InstrumentDto.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.DTOs{public class InstrumentDto{public Guid Id{get;set;}public string Symbol{get;set;}=string.Empty;public string Name{get;set;}=string.Empty;public decimal? LastPrice{get;set;}public string? CurrentRecommendation{get;set;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Queries\GetInstrumentQuery.cs===

using Application.DTOs;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.Queries{public class GetInstrumentQuery : IQuery<InstrumentDto?>{public string Symbol{get;}public GetInstrumentQuery(string symbol){Symbol=symbol;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Queries\GetInstrumentQueryHandler.cs===

using Application.DTOs;using Domain.Interfaces;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.Queries{public class GetInstrumentQueryHandler : IQueryHandler<GetInstrumentQuery,InstrumentDto?>{private readonly IInvestmentInstrumentRepository _repository;public GetInstrumentQueryHandler(IInvestmentInstrumentRepository repository){_repository=repository;}public async Task<InstrumentDto?>HandleAsync(GetInstrumentQuery query,CancellationToken cancellationToken=default){var instrument=await _repository.GetBySymbolAsync(query.Symbol);if(instrument==null)return null;var lastPrice=instrument.PriceHistory.OrderByDescending(p=>p.Date).FirstOrDefault()?.Close;var recommendation=instrument.CurrentRecommendation?.Action.ToString();return new InstrumentDto{Id=instrument.InvestmentInstrumentId,Symbol=instrument.Symbol,Name=instrument.Name,LastPrice=lastPrice,CurrentRecommendation=recommendation};}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Queries\IQuery.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.Queries{public interface IQuery<TResult>{}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Queries\IQueryHandler.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Application.Queries{public interface IQueryHandler<TQuery,TResult>where TQuery : IQuery<TResult>{Task<TResult>HandleAsync(TQuery query,CancellationToken cancellationToken=default);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Application\Application.csproj===

<Project Sdk="Microsoft.NET.Sdk"><PropertyGroup><TargetFramework>net9.0</TargetFramework><ImplicitUsings>enable</ImplicitUsings><Nullable>enable</Nullable></PropertyGroup><ItemGroup><ProjectReference Include="..\InvestmentAdvisor.Domain\Domain.csproj"/></ItemGroup><ItemGroup><Folder Include="Interfaces\"/></ItemGroup><ItemGroup><PackageReference Include="Microsoft.Extensions.Configuration.Abstractions" Version="9.0.0"/><PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="9.0.0"/></ItemGroup></Project>

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Entities\FundamentalData.cs===

using Domain.ValueObjects;namespace Domain.Entities{public class FundamentalData{public Guid Id{get;private set;}public Guid InvestmentInstrumentId{get;private set;}public ValuationMetrics Valuation{get;private set;}public GrowthMetrics Growth{get;private set;}public ProfitabilityMetrics Profitability{get;private set;}public StabilityMetrics Stability{get;private set;}public DividendMetrics Dividend{get;private set;}public MarketRiskMetrics MarketRisk{get;private set;}public SentimentMetrics Sentiment{get;private set;}public ComparableMetrics Comparable{get;private set;}public EarningsMetrics Earnings{get;private set;}public RevenueMetrics Revenue{get;private set;}public CashFlowMetrics CashFlow{get;private set;}public CostOfCapitalMetrics CostOfCapital{get;private set;}protected FundamentalData(){}public FundamentalData(ValuationMetrics valuation,GrowthMetrics growth,ProfitabilityMetrics profitability,StabilityMetrics stability,DividendMetrics dividend,MarketRiskMetrics marketRisk,SentimentMetrics sentiment,ComparableMetrics comparable,EarningsMetrics earnings,RevenueMetrics revenue,CashFlowMetrics cashFlow,CostOfCapitalMetrics costOfCapital){Id=Guid.NewGuid();Valuation=valuation;Growth=growth;Profitability=profitability;Stability=stability;Dividend=dividend;MarketRisk=marketRisk;Sentiment=sentiment;Comparable=comparable;Earnings=earnings;Revenue=revenue;CashFlow=cashFlow;CostOfCapital=costOfCapital;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Entities\InvestmentInstrument.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Domain.Entities{public class InvestmentInstrument{public Guid InvestmentInstrumentId{get;private set;}public string Symbol{get;private set;}public string Name{get;private set;}public FundamentalData FundamentalData{get;private set;}public List<PriceData>PriceHistory{get;private set;}=new List<PriceData>();public Recommendation CurrentRecommendation{get;private set;}protected InvestmentInstrument(){}public InvestmentInstrument(string symbol,string name){InvestmentInstrumentId=Guid.NewGuid();Symbol=symbol;Name=name;}public void UpdateFundamentalData(FundamentalData newData){FundamentalData=newData;}public void SetRecommendation(Recommendation recommendation){CurrentRecommendation=recommendation;}public void AddPriceData(PriceData priceData){PriceHistory.Add(priceData);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Entities\PriceData.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Domain.Entities{public class PriceData{public Guid Id{get;private set;}public Guid InvestmentInstrumentId{get;private set;}public DateTime Date{get;private set;}public decimal Open{get;private set;}public decimal High{get;private set;}public decimal Low{get;private set;}public decimal Close{get;private set;}public long Volume{get;private set;}protected PriceData(){}public PriceData(DateTime date,decimal open,decimal high,decimal low,decimal close,long volume){Id=Guid.NewGuid();Date=date;Open=open;High=high;Low=low;Close=close;Volume=volume;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Entities\Recommendation.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Domain.Entities{public class Recommendation{public Guid Id{get;private set;}public Guid InvestmentInstrumentId{get;private set;}public RecommendationAction Action{get;private set;}public int Score{get;private set;}public string TimeHorizon{get;private set;}public decimal TargetPrice{get;private set;}public string Rationale{get;private set;}public string RiskLevel{get;private set;}protected Recommendation(){}public Recommendation(RecommendationAction action,int score,string timeHorizon,decimal targetPrice,string rationale,string riskLevel){Id=Guid.NewGuid();Action=action;Score=score;TimeHorizon=timeHorizon;TargetPrice=targetPrice;Rationale=rationale;RiskLevel=riskLevel;}}public enum RecommendationAction{StrongBuy=1,Buy=2,Accumulate=3,Hold=4,Reduce=5,Sell=6,StrongSell=7}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Interfaces\IDataAcquisitionService.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Domain.Interfaces{public interface IDataAcquisitionService{Task FullUpdateAsync(string symbol);Task UpdatePriceDataAsync(string symbol);Task UpdateFundamentalsAsync(string symbol);Task UpdateSentimentAndEstimatesAsync(string symbol);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Interfaces\IInvestmentInstrumentRepository.cs===

using Domain.Entities;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Domain.Interfaces{public interface IInvestmentInstrumentRepository : IRepository<InvestmentInstrument>{Task<InvestmentInstrument?>GetBySymbolAsync(string symbol);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Interfaces\IRecommendationService.cs===

using Domain.Entities;namespace Domain.Interfaces{public interface IRecommendationService{Recommendation GenerateRecommendation(InvestmentInstrument instrument);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Interfaces\IRepository.cs===

namespace Domain.Interfaces{public interface IRepository<T>{Task<T?>GetByIdAsync(Guid id);Task AddAsync(T entity);Task UpdateAsync(T entity);Task DeleteAsync(T entity);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Interfaces\IValuationService.cs===

using Domain.Entities;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Domain.Interfaces{public interface IValuationService{decimal CalculateIntrinsicValue(InvestmentInstrument instrument);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Services\CalculationModels\ComparableAnalysisModel.cs===

using Domain.Entities;namespace Domain.Services.CalculationModels{public class ComparableAnalysisModel{public decimal CalculateComparableValue(FundamentalData data){decimal companyEPS=data.Earnings.EPS;decimal companyEBITDA=data.Earnings.EBITDA;decimal companySalesPerShare=data.Revenue.SalesPerShare;decimal sectorPE=data.Comparable.SectorAveragePE;decimal sectorEVEBITDA=data.Comparable.PeerEVEBITDA;decimal sectorPriceSales=data.Comparable.SectorPriceSales;decimal fairValuePE=companyEPS*sectorPE;decimal fairValueEVEBITDA=(companyEBITDA*sectorEVEBITDA);decimal fairValuePS=companySalesPerShare*sectorPriceSales;decimal averageFairValue=(fairValuePE+fairValueEVEBITDA+fairValuePS)/3m;return averageFairValue;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Services\CalculationModels\DCFModel.cs===

using Domain.Entities;namespace Domain.Services.CalculationModels{public class DCFModel{public decimal CalculateDCFValue(FundamentalData data){decimal wacc=data.CostOfCapital.WACC;decimal currentFCF=data.CashFlow.CurrentFCF;decimal fcfGrowth=data.Growth.PredictedFCFGrowth;decimal longTermGrowth=data.Growth.LongTermGrowthRate;int projectionYears=10;decimal discountFactor=1+wacc;decimal presentValueSum=0m;decimal fcf=currentFCF;for(int year=1;year<=projectionYears;year++){fcf*=(1+fcfGrowth);decimal discountedFCF=fcf/(decimal)Math.Pow((double)discountFactor,year);presentValueSum+=discountedFCF;}decimal terminalValue=(fcf*(1+longTermGrowth))/(wacc-longTermGrowth);decimal discountedTerminalValue=terminalValue/(decimal)Math.Pow((double)discountFactor,projectionYears);return presentValueSum+discountedTerminalValue;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Services\CalculationModels\DDMModel.cs===

using Domain.Entities;namespace Domain.Services.CalculationModels{public class DDMModel{public decimal CalculateDDMValue(FundamentalData data){decimal r=data.CostOfCapital.RequiredReturnOnEquity;decimal g=data.Dividend.DividendGrowth;decimal currentDividend=data.Dividend.CurrentAnnualDividend;decimal D1=currentDividend*(1+g);if(g>=r){return currentDividend/r;}return D1/(r-g);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Services\CalculationModels\ScoreModel.cs===

using Domain.Entities;namespace Domain.Services.CalculationModels{public class ScoreModel{public decimal CalculateScoreValue(FundamentalData data){decimal valuationWeight=0.2m;decimal growthWeight=0.2m;decimal profitabilityWeight=0.2m;decimal stabilityWeight=0.15m;decimal dividendWeight=0.15m;decimal riskWeight=0.1m;decimal valuationScore=100m-data.Valuation.PE*2m;decimal growthScore=100m*(1+data.Growth.PredictedEpsGrowth);decimal profitabilityScore=(data.Profitability.ROE*10m)+(data.Profitability.NetMargin*50m);decimal stabilityScore=100m-data.Stability.DebtToEquity*10m+data.Stability.InterestCoverage*5m;decimal dividendScore=(data.Dividend.DividendYield*20m)+(data.Dividend.DividendGrowth*50m);decimal riskScore=100m-(data.MarketRisk.Beta*20m);decimal totalScore=(valuationScore*valuationWeight)+(growthScore*growthWeight)+(profitabilityScore*profitabilityWeight)+(stabilityScore*stabilityWeight)+(dividendScore*dividendWeight)+(riskScore*riskWeight);return totalScore;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Services\RecommendationService.cs===

using Domain.Entities;using Domain.Interfaces;namespace Domain.Services{public class RecommendationService : IRecommendationService{private readonly IValuationService _valuationService;public RecommendationService(IValuationService valuationService){_valuationService=valuationService;}public Recommendation GenerateRecommendation(InvestmentInstrument instrument){if(instrument.FundamentalData==null || instrument.PriceHistory.Count==0){throw new InvalidOperationException("Instrument requires fundamental and price data.");}var intrinsicValue=_valuationService.CalculateIntrinsicValue(instrument);var lastPrice=instrument.PriceHistory.OrderByDescending(p=>p.Date).First().Close;var diffPercent=((intrinsicValue-lastPrice)/lastPrice)*100m;RecommendationAction action;int score;if(diffPercent>20){action=RecommendationAction.StrongBuy;score=1;}else if(diffPercent>10){action=RecommendationAction.Buy;score=2;}else if(diffPercent>0){action=RecommendationAction.Accumulate;score=3;}else if(diffPercent>-5){action=RecommendationAction.Hold;score=4;}else if(diffPercent>-10){action=RecommendationAction.Reduce;score=5;}else if(diffPercent>-20){action=RecommendationAction.Sell;score=6;}else{action=RecommendationAction.StrongSell;score=7;}var timeHorizon="12 měsíců";var targetPrice=intrinsicValue;var rationale=$"Vnitřní hodnota:{intrinsicValue:F2},Aktuální cena:{lastPrice:F2},Odchylka:{diffPercent:F2}%";var beta=instrument.FundamentalData?.MarketRisk?.Beta ?? 1.0m;string riskLevel;if(beta>1.2m)riskLevel="Vysoké";else if(beta<0.8m)riskLevel="Nízké";else riskLevel="Střední";return new Recommendation(action: action,score: score,timeHorizon: timeHorizon,targetPrice: targetPrice,rationale: rationale,riskLevel: riskLevel);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Services\ValuationService.cs===

using Domain.Entities;using Domain.Interfaces;using Domain.Services.CalculationModels;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Domain.Services{public class ValuationService : IValuationService{private readonly DCFModel _dcfModel;private readonly DDMModel _ddmModel;private readonly ComparableAnalysisModel _comparableModel;private readonly ScoreModel _scoreModel;public ValuationService(){_dcfModel=new DCFModel();_ddmModel=new DDMModel();_comparableModel=new ComparableAnalysisModel();_scoreModel=new ScoreModel();}public decimal CalculateIntrinsicValue(InvestmentInstrument instrument){if(instrument.FundamentalData==null)throw new InvalidOperationException("Fundamental data is required.");var data=instrument.FundamentalData;decimal dcfValue=_dcfModel.CalculateDCFValue(data);decimal ddmValue=data.Dividend.CurrentAnnualDividend>0 ? _ddmModel.CalculateDDMValue(data): dcfValue;decimal compValue=_comparableModel.CalculateComparableValue(data);decimal scoreValue=_scoreModel.CalculateScoreValue(data);decimal dcfWeight=0.4m;decimal ddmWeight=data.Dividend.CurrentAnnualDividend>0 ? 0.2m : 0.0m;decimal compWeight=0.2m;decimal scoreWeight=0.2m;decimal totalWeight=dcfWeight+ddmWeight+compWeight+scoreWeight;dcfWeight/=totalWeight;ddmWeight/=totalWeight;compWeight/=totalWeight;scoreWeight/=totalWeight;decimal weightedValue=(dcfValue*dcfWeight)+(ddmValue*ddmWeight)+(compValue*compWeight)+(scoreValue*scoreWeight);return weightedValue;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\CashFlowMetrics.cs===

namespace Domain.ValueObjects{public record CashFlowMetrics(decimal CurrentFCF,decimal ProjectedFCFGrowth);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\ComparableMetrics.cs===

namespace Domain.ValueObjects{public record ComparableMetrics(decimal SectorAveragePE,decimal SectorMedianPB,decimal PeerEVEBITDA,decimal SectorPriceSales);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\CostOfCapitalMetrics.cs===

namespace Domain.ValueObjects{public record CostOfCapitalMetrics(decimal WACC,decimal RequiredReturnOnEquity);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\DividendMetrics.cs===

namespace Domain.ValueObjects{public record DividendMetrics(decimal DividendYield,decimal DividendPayoutRatio,decimal DividendGrowth,decimal CurrentAnnualDividend);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\EarningsMetrics.cs===

namespace Domain.ValueObjects{public record EarningsMetrics(decimal EPS,decimal EBITDA);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\GrowthMetrics.cs===

namespace Domain.ValueObjects{public record GrowthMetrics(decimal HistoricalEpsGrowth,decimal PredictedEpsGrowth,decimal RevenueGrowth,decimal ProfitGrowth,decimal DividendGrowth,decimal PredictedFCFGrowth,decimal LongTermGrowthRate);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\MarketRiskMetrics.cs===

namespace Domain.ValueObjects{public record MarketRiskMetrics(decimal Beta,decimal SharpeRatio,decimal StandardDeviation);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\ProfitabilityMetrics.cs===

namespace Domain.ValueObjects{public record ProfitabilityMetrics(decimal ROE,decimal ROA,decimal GrossMargin,decimal OperatingMargin,decimal NetMargin);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\RevenueMetrics.cs===

namespace Domain.ValueObjects{public record RevenueMetrics(decimal SalesPerShare);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\SentimentMetrics.cs===

namespace Domain.ValueObjects{public record SentimentMetrics(decimal ConsensusTargetPrice,string AnalystRecommendation,decimal MediaSentimentScore);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\StabilityMetrics.cs===

namespace Domain.ValueObjects{public record StabilityMetrics(decimal DebtToEquity,decimal CurrentRatio,decimal QuickRatio,decimal InterestCoverage);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\ValueObjects\ValuationMetrics.cs===

namespace Domain.ValueObjects{public record ValuationMetrics(decimal PE,decimal PB,decimal EV_EBITDA,decimal EV_EBIT,decimal PriceSales,decimal PriceCashFlow);}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Domain\Domain.csproj===

<Project Sdk="Microsoft.NET.Sdk"><PropertyGroup><TargetFramework>net9.0</TargetFramework><ImplicitUsings>enable</ImplicitUsings><Nullable>enable</Nullable></PropertyGroup></Project>

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\Policies\Config.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Infrastructure.Adapters.APIs.Policies{public interface ICircuitBreakerPolicyConfig{int RetryCount{get;set;}int BreakDuration{get;set;}}public interface IRetryPolicyConfig{int RetryCount{get;set;}}public class PolicyConfig : ICircuitBreakerPolicyConfig,IRetryPolicyConfig{public int RetryCount{get;set;}public int BreakDuration{get;set;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\Policies\HttpCircuitBreakerPolicies.cs===

using Polly.CircuitBreaker;using Polly;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using Microsoft.Extensions.Logging;namespace Infrastructure.Adapters.APIs.Policies{public class HttpCircuitBreakerPolicies{public static CircuitBreakerPolicy<HttpResponseMessage>GetHttpCircuitBreakerPolicy(ILogger logger,ICircuitBreakerPolicyConfig circuitBreakerPolicyConfig){return HttpPolicyBuilders.GetBaseBuilder().CircuitBreaker(handledEventsAllowedBeforeBreaking: circuitBreakerPolicyConfig.RetryCount+1,durationOfBreak: TimeSpan.FromSeconds(circuitBreakerPolicyConfig.BreakDuration),onBreak:(outcome,breakDuration)=>{OnHttpBreak(outcome,breakDuration,circuitBreakerPolicyConfig.RetryCount,logger);},onReset:()=>{OnHttpReset(logger);});}private static void OnHttpBreak(DelegateResult<HttpResponseMessage>outcome,TimeSpan breakDuration,int retryCount,ILogger logger){logger.LogWarning("Circuit breaker opened for{breakDuration}seconds after{retryCount}failed retries.",breakDuration.TotalSeconds,retryCount);}private static void OnHttpReset(ILogger logger){logger.LogInformation("Circuit breaker reset.");}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\Policies\HttpClientPolicies.cs===

using Polly;using Polly.Extensions.Http;using Polly.CircuitBreaker;using Polly.Retry;using System;using System.Net.Http;using Microsoft.Extensions.Logging;namespace Infrastructure.Adapters.APIs.Policies{public static class HttpRetryPolicies{public static RetryPolicy<HttpResponseMessage>GetHttpRetryPolicy(ILogger logger,IRetryPolicyConfig retryPolicyConfig){return HttpPolicyBuilders.GetBaseBuilder().WaitAndRetry(retryCount: retryPolicyConfig.RetryCount,sleepDurationProvider: retryAttempt=>ComputeDuration(retryAttempt),onRetry:(outcome,timespan,retryAttempt,context)=>{OnHttpRetry(outcome,timespan,retryAttempt,context,logger);});}private static void OnHttpRetry(DelegateResult<HttpResponseMessage>result,TimeSpan timeSpan,int retryCount,Polly.Context context,ILogger logger){if(result.Result !=null){logger.LogWarning("Request failed with{StatusCode}. Waiting{timeSpan}before next retry. Retry attempt{retryCount}",result.Result.StatusCode,timeSpan,retryCount);}else{logger.LogWarning("Request failed due to network failure. Waiting{timeSpan}before next retry. Retry attempt{retryCount}",timeSpan,retryCount);}}private static TimeSpan ComputeDuration(int retryAttempt){return TimeSpan.FromSeconds(Math.Pow(2,retryAttempt))+TimeSpan.FromMilliseconds(new Random().Next(0,100));}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\Policies\HttpPolicyBuilders.cs===

using Polly;using Polly.Extensions.Http;namespace Infrastructure.Adapters.APIs.Policies{public static class HttpPolicyBuilders{public static PolicyBuilder<HttpResponseMessage>GetBaseBuilder(){return HttpPolicyExtensions.HandleTransientHttpError();}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\AlphaVantageClient.cs===

using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Infrastructure.Adapters.APIs{public class AlphaVantageClient : IAlphaVantageClient{private readonly HttpClient _httpClient;private readonly string _apiKey="1NXFY3QF7T7V6PH8";public AlphaVantageClient(HttpClient httpClient,string apiKey){_httpClient=httpClient;_apiKey=apiKey;}public async Task<string>GetDailyPricesAsync(string symbol,string outputSize="compact"){var uri=$"query?function=TIME_SERIES_DAILY&symbol={symbol}&outputsize={outputSize}&apikey={_apiKey}";return await GetJsonAsync(uri);}public async Task<string>GetCompanyOverviewAsync(string symbol){var uri=$"query?function=OVERVIEW&symbol={symbol}&apikey={_apiKey}";return await GetJsonAsync(uri);}public async Task<string>GetEarningsAsync(string symbol){var uri=$"query?function=EARNINGS&symbol={symbol}&apikey={_apiKey}";return await GetJsonAsync(uri);}public async Task<string>GetIncomeStatementAsync(string symbol){var uri=$"query?function=INCOME_STATEMENT&symbol={symbol}&apikey={_apiKey}";return await GetJsonAsync(uri);}public async Task<string>GetBalanceSheetAsync(string symbol){var uri=$"query?function=BALANCE_SHEET&symbol={symbol}&apikey={_apiKey}";return await GetJsonAsync(uri);}public async Task<string>GetCashFlowAsync(string symbol){var uri=$"query?function=CASH_FLOW&symbol={symbol}&apikey={_apiKey}";return await GetJsonAsync(uri);}private async Task<string>GetJsonAsync(string relativeUri){var response=await _httpClient.GetAsync(relativeUri);response.EnsureSuccessStatusCode();return await response.Content.ReadAsStringAsync();}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\FinnhubClient.cs===

namespace Infrastructure.Adapters.APIs{public class FinnhubClient : IFinnhubClient{private readonly HttpClient _httpClient;public FinnhubClient(HttpClient httpClient){_httpClient=httpClient;}public async Task<string>GetCompanyProfileAsync(string symbol){var response=await _httpClient.GetAsync($"stock/profile2?symbol={symbol}&token=YOUR_API_KEY");response.EnsureSuccessStatusCode();return await response.Content.ReadAsStringAsync();}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\HttpClientPolicies.cs===

using Polly;using Polly.Extensions.Http;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Infrastructure.Adapters.APIs{public static class HttpClientPolicies{public static IAsyncPolicy<HttpResponseMessage>GetRetryPolicy()=>HttpPolicyExtensions .HandleTransientHttpError().WaitAndRetryAsync(3,attempt=>TimeSpan.FromSeconds(Math.Pow(2,attempt)));public static IAsyncPolicy<HttpResponseMessage>GetCircuitBreakerPolicy()=>HttpPolicyExtensions .HandleTransientHttpError().CircuitBreakerAsync(5,TimeSpan.FromSeconds(30));}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\IAlphaVantageClient.cs===

namespace Infrastructure.Adapters.APIs{public interface IAlphaVantageClient{Task<string>GetDailyPricesAsync(string symbol,string outputSize="compact");Task<string>GetCompanyOverviewAsync(string symbol);Task<string>GetEarningsAsync(string symbol);Task<string>GetIncomeStatementAsync(string symbol);Task<string>GetBalanceSheetAsync(string symbol);Task<string>GetCashFlowAsync(string symbol);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\IEXCloudClient.cs===

namespace Infrastructure.Adapters.APIs{public class IEXCloudClient : IIEXCloudClient{private readonly HttpClient _httpClient;public IEXCloudClient(HttpClient httpClient){_httpClient=httpClient;}public async Task<string>GetQuoteAsync(string symbol){var response=await _httpClient.GetAsync($"stock/{symbol}/quote?token=YOUR_API_KEY");response.EnsureSuccessStatusCode();return await response.Content.ReadAsStringAsync();}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\IFinnhubClient.cs===

namespace Infrastructure.Adapters.APIs{public interface IFinnhubClient{Task<string>GetCompanyProfileAsync(string symbol);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\APIs\IIEXCloudClient.cs===

namespace Infrastructure.Adapters.APIs{public interface IIEXCloudClient{Task<string>GetQuoteAsync(string symbol);}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Adapters\Mappers\ExternalDataToDomainMapper.cs===

using Domain.Entities;using Domain.ValueObjects;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Text.Json;using System.Threading.Tasks;namespace Infrastructure.Adapters.Mappers{public static class ExternalDataToDomainMapper{public static PriceData MapPriceData(JsonElement dailyData,DateTime date){return new PriceData(date: date,open: dailyData.GetProperty("1. open").GetDecimal(),high: dailyData.GetProperty("2. high").GetDecimal(),low: dailyData.GetProperty("3. low").GetDecimal(),close: dailyData.GetProperty("4. close").GetDecimal(),volume: dailyData.GetProperty("5. volume").GetInt64());}public static FundamentalData MapFundamentalData(JsonElement companyProfile){var valuation=new ValuationMetrics(PE: companyProfile.GetProperty("peRatio").GetDecimal(),PB: companyProfile.GetProperty("pbRatio").GetDecimal(),EV_EBITDA: companyProfile.GetProperty("evToEbitda").GetDecimal(),EV_EBIT: 0m,PriceSales: companyProfile.GetProperty("priceToSales").GetDecimal(),PriceCashFlow: 0m);var growth=new GrowthMetrics(HistoricalEpsGrowth: companyProfile.GetProperty("epsGrowth5Y").GetDecimal(),PredictedEpsGrowth: companyProfile.GetProperty("epsGrowth1Y").GetDecimal(),RevenueGrowth: companyProfile.GetProperty("revenueGrowth5Y").GetDecimal(),ProfitGrowth: 0m,DividendGrowth: 0m,PredictedFCFGrowth: 0.05m,LongTermGrowthRate: 0.03m);var profitability=new ProfitabilityMetrics(ROE: companyProfile.GetProperty("returnOnEquity").GetDecimal(),ROA: companyProfile.GetProperty("returnOnAssets").GetDecimal(),GrossMargin: companyProfile.GetProperty("grossMargin").GetDecimal(),OperatingMargin: companyProfile.GetProperty("operatingMargin").GetDecimal(),NetMargin: companyProfile.GetProperty("netProfitMargin").GetDecimal());var stability=new StabilityMetrics(DebtToEquity: companyProfile.GetProperty("debtToEquity").GetDecimal(),CurrentRatio: companyProfile.GetProperty("currentRatio").GetDecimal(),QuickRatio: 0m,InterestCoverage: companyProfile.GetProperty("interestCoverage").GetDecimal());var dividend=new DividendMetrics(DividendYield: companyProfile.GetProperty("dividendYield").GetDecimal(),DividendPayoutRatio: companyProfile.GetProperty("payoutRatio").GetDecimal(),DividendGrowth: 0.02m,CurrentAnnualDividend: companyProfile.GetProperty("annualDividend").GetDecimal());var marketRisk=new MarketRiskMetrics(Beta: companyProfile.GetProperty("beta").GetDecimal(),SharpeRatio: 0m,StandardDeviation: 0m);var sentiment=new SentimentMetrics(ConsensusTargetPrice: companyProfile.GetProperty("targetPrice").GetDecimal(),AnalystRecommendation: companyProfile.GetProperty("analystRecommendation").GetString(),MediaSentimentScore: 0.8m);var comparable=new ComparableMetrics(SectorAveragePE: companyProfile.GetProperty("sectorPE").GetDecimal(),SectorMedianPB: companyProfile.GetProperty("sectorPB").GetDecimal(),PeerEVEBITDA: companyProfile.GetProperty("sectorEVEBITDA").GetDecimal(),SectorPriceSales: companyProfile.GetProperty("sectorPriceSales").GetDecimal());var earnings=new EarningsMetrics(EPS: companyProfile.GetProperty("eps").GetDecimal(),EBITDA: companyProfile.GetProperty("ebitda").GetDecimal());var revenue=new RevenueMetrics(SalesPerShare: companyProfile.GetProperty("salesPerShare").GetDecimal());var cashFlow=new CashFlowMetrics(CurrentFCF: companyProfile.GetProperty("freeCashFlow").GetDecimal(),ProjectedFCFGrowth: 0.05m);var costOfCapital=new CostOfCapitalMetrics(WACC: 0.08m,RequiredReturnOnEquity: 0.10m);return new FundamentalData(valuation: valuation,growth: growth,profitability: profitability,stability: stability,dividend: dividend,marketRisk: marketRisk,sentiment: sentiment,comparable: comparable,earnings: earnings,revenue: revenue,cashFlow: cashFlow,costOfCapital: costOfCapital);}public static FundamentalData MapSentimentAndEstimates(FundamentalData data,JsonElement sentimentData){var updatedSentiment=new SentimentMetrics(ConsensusTargetPrice: sentimentData.GetProperty("targetPrice").GetDecimal(),AnalystRecommendation: sentimentData.GetProperty("recommendation").GetString(),MediaSentimentScore: sentimentData.GetProperty("mediaSentiment").GetDecimal());return new FundamentalData(valuation: data.Valuation,growth: data.Growth,profitability: data.Profitability,stability: data.Stability,dividend: data.Dividend,marketRisk: data.MarketRisk,sentiment: updatedSentiment,comparable: data.Comparable,earnings: data.Earnings,revenue: data.Revenue,cashFlow: data.CashFlow,costOfCapital: data.CostOfCapital);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Data\Configurations\FundamentalDataConfiguration.cs===

using Domain.Entities;using Microsoft.EntityFrameworkCore.Metadata.Builders;using Microsoft.EntityFrameworkCore;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Infrastructure.Data.Configurations{public class FundamentalDataConfiguration : IEntityTypeConfiguration<FundamentalData>{public void Configure(EntityTypeBuilder<FundamentalData>builder){builder.HasKey(f=>f.Id);builder.HasOne<InvestmentInstrument>().WithOne(i=>i.FundamentalData).HasForeignKey<FundamentalData>(f=>f.InvestmentInstrumentId).OnDelete(DeleteBehavior.Cascade);builder.OwnsOne(f=>f.Valuation,vo=>{vo.Property(v=>v.PE).HasColumnName("Valuation_PE");vo.Property(v=>v.PB).HasColumnName("Valuation_PB");vo.Property(v=>v.EV_EBITDA).HasColumnName("Valuation_EVEBITDA");vo.Property(v=>v.EV_EBIT).HasColumnName("Valuation_EVEBIT");vo.Property(v=>v.PriceSales).HasColumnName("Valuation_PriceSales");vo.Property(v=>v.PriceCashFlow).HasColumnName("Valuation_PriceCashFlow");});builder.OwnsOne(f=>f.Growth,go=>{go.Property(g=>g.HistoricalEpsGrowth).HasColumnName("Growth_HistoricalEps");go.Property(g=>g.PredictedEpsGrowth).HasColumnName("Growth_PredictedEps");go.Property(g=>g.RevenueGrowth).HasColumnName("Growth_Revenue");go.Property(g=>g.ProfitGrowth).HasColumnName("Growth_Profit");go.Property(g=>g.DividendGrowth).HasColumnName("Growth_Dividend");go.Property(g=>g.PredictedFCFGrowth).HasColumnName("Growth_PredictedFCF");go.Property(g=>g.LongTermGrowthRate).HasColumnName("Growth_LongTerm");});builder.OwnsOne(f=>f.Profitability,po=>{po.Property(p=>p.ROE).HasColumnName("Profitability_ROE");po.Property(p=>p.ROA).HasColumnName("Profitability_ROA");po.Property(p=>p.GrossMargin).HasColumnName("Profitability_GrossMargin");po.Property(p=>p.OperatingMargin).HasColumnName("Profitability_OperatingMargin");po.Property(p=>p.NetMargin).HasColumnName("Profitability_NetMargin");});builder.OwnsOne(f=>f.Stability,so=>{so.Property(s=>s.DebtToEquity).HasColumnName("Stability_DebtToEquity");so.Property(s=>s.CurrentRatio).HasColumnName("Stability_CurrentRatio");so.Property(s=>s.QuickRatio).HasColumnName("Stability_QuickRatio");so.Property(s=>s.InterestCoverage).HasColumnName("Stability_InterestCoverage");});builder.OwnsOne(f=>f.Dividend,doo=>{doo.Property(d=>d.DividendYield).HasColumnName("Dividend_Yield");doo.Property(d=>d.DividendPayoutRatio).HasColumnName("Dividend_PayoutRatio");doo.Property(d=>d.DividendGrowth).HasColumnName("Dividend_Growth");doo.Property(d=>d.CurrentAnnualDividend).HasColumnName("Dividend_CurrentAnnual");});builder.OwnsOne(f=>f.MarketRisk,mo=>{mo.Property(m=>m.Beta).HasColumnName("MarketRisk_Beta");mo.Property(m=>m.SharpeRatio).HasColumnName("MarketRisk_SharpeRatio");mo.Property(m=>m.StandardDeviation).HasColumnName("MarketRisk_StdDev");});builder.OwnsOne(f=>f.Sentiment,se=>{se.Property(s=>s.ConsensusTargetPrice).HasColumnName("Sentiment_TargetPrice");se.Property(s=>s.AnalystRecommendation).HasColumnName("Sentiment_AnalystRec");se.Property(s=>s.MediaSentimentScore).HasColumnName("Sentiment_MediaScore");});builder.OwnsOne(f=>f.Comparable,co=>{co.Property(c=>c.SectorAveragePE).HasColumnName("Comp_SectorAvgPE");co.Property(c=>c.SectorMedianPB).HasColumnName("Comp_SectorMedPB");co.Property(c=>c.PeerEVEBITDA).HasColumnName("Comp_PeerEVEBITDA");co.Property(c=>c.SectorPriceSales).HasColumnName("Comp_SectorPriceSales");});builder.OwnsOne(f=>f.Earnings,eo=>{eo.Property(e=>e.EPS).HasColumnName("Earnings_EPS");eo.Property(e=>e.EBITDA).HasColumnName("Earnings_EBITDA");});builder.OwnsOne(f=>f.Revenue,ro=>{ro.Property(r=>r.SalesPerShare).HasColumnName("Revenue_SalesPerShare");});builder.OwnsOne(f=>f.CashFlow,cfo=>{cfo.Property(c=>c.CurrentFCF).HasColumnName("CashFlow_CurrentFCF");cfo.Property(c=>c.ProjectedFCFGrowth).HasColumnName("CashFlow_ProjectedFCFGrowth");});builder.OwnsOne(f=>f.CostOfCapital,w=>{w.Property(wc=>wc.WACC).HasColumnName("CostOfCapital_WACC");w.Property(wc=>wc.RequiredReturnOnEquity).HasColumnName("CostOfCapital_RROE");});}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Data\Configurations\InvestmentInstrumentConfiguration.cs===

using Domain.Entities;using Microsoft.EntityFrameworkCore;using Microsoft.EntityFrameworkCore.Metadata.Builders;namespace Infrastructure.Data.Configurations{public class InvestmentInstrumentConfiguration : IEntityTypeConfiguration<InvestmentInstrument>{public void Configure(EntityTypeBuilder<InvestmentInstrument>builder){builder.HasKey(i=>i.InvestmentInstrumentId);builder.Property(i=>i.Symbol).IsRequired().HasMaxLength(50);builder.Property(i=>i.Name).HasMaxLength(200);builder.HasOne(i=>i.FundamentalData).WithOne().HasForeignKey<FundamentalData>(f=>f.InvestmentInstrumentId);builder.HasMany(i=>i.PriceHistory).WithOne().HasForeignKey(p=>p.InvestmentInstrumentId);builder.HasOne(i=>i.CurrentRecommendation).WithOne().HasForeignKey<Recommendation>(r=>r.InvestmentInstrumentId);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Data\Configurations\PriceDataConfiguration.cs===

using Domain.Entities;using Microsoft.EntityFrameworkCore;using Microsoft.EntityFrameworkCore.Metadata.Builders;namespace Infrastructure.Data.Configurations{public class PriceDataConfiguration : IEntityTypeConfiguration<PriceData>{public void Configure(EntityTypeBuilder<PriceData>builder){builder.HasKey(p=>p.Id);builder.Property(p=>p.Open).HasColumnType("decimal(18,2)").IsRequired();builder.Property(p=>p.High).HasColumnType("decimal(18,2)").IsRequired();builder.Property(p=>p.Low).HasColumnType("decimal(18,2)").IsRequired();builder.Property(p=>p.Close).HasColumnType("decimal(18,2)").IsRequired();builder.Property(p=>p.Volume).HasColumnType("bigint").IsRequired();builder.Property(p=>p.Date).HasColumnType("date").IsRequired();}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Data\Configurations\RecommendationConfiguration.cs===

using Domain.Entities;using Microsoft.EntityFrameworkCore.Metadata.Builders;using Microsoft.EntityFrameworkCore;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Infrastructure.Data.Configurations{public class RecommendationConfiguration : IEntityTypeConfiguration<Recommendation>{public void Configure(EntityTypeBuilder<Recommendation>builder){builder.HasKey(r=>r.Id);builder.Property(r=>r.Action).HasConversion<string>().HasColumnName("Action").IsRequired();builder.Property(r=>r.Score).HasColumnName("Score");builder.Property(r=>r.TimeHorizon).HasColumnName("TimeHorizon");builder.Property(r=>r.TargetPrice).HasColumnName("TargetPrice");builder.Property(r=>r.Rationale).HasColumnName("Rationale");builder.Property(r=>r.RiskLevel).HasColumnName("RiskLevel");}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Data\Repositories\BaseRepository.cs===

using Domain.Interfaces;namespace Infrastructure.Data.Repositories{public class BaseRepository<T>: IRepository<T>where T : class{protected readonly AppDbContext _context;public BaseRepository(AppDbContext context){_context=context;}public async Task<T?>GetByIdAsync(Guid id){return await _context.Set<T>().FindAsync(id);}public async Task AddAsync(T entity){await _context.Set<T>().AddAsync(entity);await _context.SaveChangesAsync();}public async Task UpdateAsync(T entity){_context.Set<T>().Update(entity);await _context.SaveChangesAsync();}public async Task DeleteAsync(T entity){_context.Set<T>().Remove(entity);await _context.SaveChangesAsync();}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Data\Repositories\InvestmentInstrumentRepository.cs===

using Domain.Entities;using Domain.Interfaces;using Microsoft.EntityFrameworkCore;namespace Infrastructure.Data.Repositories{public class InvestmentInstrumentRepository : BaseRepository<InvestmentInstrument>,IInvestmentInstrumentRepository{public InvestmentInstrumentRepository(AppDbContext context): base(context){}public async Task<InvestmentInstrument?>GetBySymbolAsync(string symbol){return await _context.InvestmentInstruments .Include(i=>i.FundamentalData).Include(i=>i.PriceHistory).Include(i=>i.CurrentRecommendation).FirstOrDefaultAsync(i=>i.Symbol==symbol);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Data\AppDbContext.cs===

using Domain.Entities;using Microsoft.EntityFrameworkCore;namespace Infrastructure.Data{public class AppDbContext : DbContext{public DbSet<InvestmentInstrument>InvestmentInstruments{get;set;}public DbSet<FundamentalData>Fundamentals{get;set;}public DbSet<PriceData>PriceDataSet{get;set;}public DbSet<Recommendation>Recommendations{get;set;}public AppDbContext(DbContextOptions<AppDbContext>options): base(options){}protected override void OnModelCreating(ModelBuilder modelBuilder){modelBuilder.ApplyConfigurationsFromAssembly(typeof(AppDbContext).Assembly);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Data\AppDbContextFactory.cs===

using Microsoft.EntityFrameworkCore.Design;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Configuration;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Infrastructure.Data{public class AppDbContextFactory : IDesignTimeDbContextFactory<AppDbContext>{public AppDbContext CreateDbContext(string[] args){var optionsBuilder=new DbContextOptionsBuilder<AppDbContext>();var configuration=new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json").Build();var connectionString=configuration.GetConnectionString("DefaultConnection");optionsBuilder.UseNpgsql(connectionString);return new AppDbContext(optionsBuilder.Options);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\DependencyInjection\InfrastructureServicesRegistration.cs===

using Domain.Interfaces;using Domain.Services;using Infrastructure.Data;using Infrastructure.Data.Repositories;using Infrastructure.Services;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Infrastructure.DependencyInjection{public static class InfrastructureServicesRegistration{public static IServiceCollection AddInfrastructureServices(this IServiceCollection services,IConfiguration configuration){services.AddDbContext<AppDbContext>(options=>options.UseNpgsql(configuration.GetConnectionString("DefaultConnection")));services.AddScoped<IInvestmentInstrumentRepository,InvestmentInstrumentRepository>();services.AddScoped<IValuationService,ValuationService>();services.AddScoped<IRecommendationService,RecommendationService>();services.AddScoped<IDataAcquisitionService,DataAcquisitionService>();return services;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Migrations\20241219204728_Init.cs===

using System;using Microsoft.EntityFrameworkCore.Migrations;#nullable disable namespace Infrastructure.Migrations{public partial class Init : Migration{protected override void Up(MigrationBuilder migrationBuilder){migrationBuilder.CreateTable(name: "InvestmentInstruments",columns: table=>new{InvestmentInstrumentId=table.Column<Guid>(type: "uuid",nullable: false),Symbol=table.Column<string>(type: "character varying(50)",maxLength: 50,nullable: false),Name=table.Column<string>(type: "character varying(200)",maxLength: 200,nullable: false)},constraints: table=>{table.PrimaryKey("PK_InvestmentInstruments",x=>x.InvestmentInstrumentId);});migrationBuilder.CreateTable(name: "Fundamentals",columns: table=>new{Id=table.Column<Guid>(type: "uuid",nullable: false),InvestmentInstrumentId=table.Column<Guid>(type: "uuid",nullable: false),Valuation_PE=table.Column<decimal>(type: "numeric",nullable: false),Valuation_PB=table.Column<decimal>(type: "numeric",nullable: false),Valuation_EVEBITDA=table.Column<decimal>(type: "numeric",nullable: false),Valuation_EVEBIT=table.Column<decimal>(type: "numeric",nullable: false),Valuation_PriceSales=table.Column<decimal>(type: "numeric",nullable: false),Valuation_PriceCashFlow=table.Column<decimal>(type: "numeric",nullable: false),Growth_HistoricalEps=table.Column<decimal>(type: "numeric",nullable: false),Growth_PredictedEps=table.Column<decimal>(type: "numeric",nullable: false),Growth_Revenue=table.Column<decimal>(type: "numeric",nullable: false),Growth_Profit=table.Column<decimal>(type: "numeric",nullable: false),Growth_Dividend=table.Column<decimal>(type: "numeric",nullable: false),Growth_PredictedFCF=table.Column<decimal>(type: "numeric",nullable: false),Growth_LongTerm=table.Column<decimal>(type: "numeric",nullable: false),Profitability_ROE=table.Column<decimal>(type: "numeric",nullable: false),Profitability_ROA=table.Column<decimal>(type: "numeric",nullable: false),Profitability_GrossMargin=table.Column<decimal>(type: "numeric",nullable: false),Profitability_OperatingMargin=table.Column<decimal>(type: "numeric",nullable: false),Profitability_NetMargin=table.Column<decimal>(type: "numeric",nullable: false),Stability_DebtToEquity=table.Column<decimal>(type: "numeric",nullable: false),Stability_CurrentRatio=table.Column<decimal>(type: "numeric",nullable: false),Stability_QuickRatio=table.Column<decimal>(type: "numeric",nullable: false),Stability_InterestCoverage=table.Column<decimal>(type: "numeric",nullable: false),Dividend_Yield=table.Column<decimal>(type: "numeric",nullable: false),Dividend_PayoutRatio=table.Column<decimal>(type: "numeric",nullable: false),Dividend_Growth=table.Column<decimal>(type: "numeric",nullable: false),Dividend_CurrentAnnual=table.Column<decimal>(type: "numeric",nullable: false),MarketRisk_Beta=table.Column<decimal>(type: "numeric",nullable: false),MarketRisk_SharpeRatio=table.Column<decimal>(type: "numeric",nullable: false),MarketRisk_StdDev=table.Column<decimal>(type: "numeric",nullable: false),Sentiment_TargetPrice=table.Column<decimal>(type: "numeric",nullable: false),Sentiment_AnalystRec=table.Column<string>(type: "text",nullable: false),Sentiment_MediaScore=table.Column<decimal>(type: "numeric",nullable: false),Comp_SectorAvgPE=table.Column<decimal>(type: "numeric",nullable: false),Comp_SectorMedPB=table.Column<decimal>(type: "numeric",nullable: false),Comp_PeerEVEBITDA=table.Column<decimal>(type: "numeric",nullable: false),Comp_SectorPriceSales=table.Column<decimal>(type: "numeric",nullable: false),Earnings_EPS=table.Column<decimal>(type: "numeric",nullable: false),Earnings_EBITDA=table.Column<decimal>(type: "numeric",nullable: false),Revenue_SalesPerShare=table.Column<decimal>(type: "numeric",nullable: false),CashFlow_CurrentFCF=table.Column<decimal>(type: "numeric",nullable: false),CashFlow_ProjectedFCFGrowth=table.Column<decimal>(type: "numeric",nullable: false),CostOfCapital_WACC=table.Column<decimal>(type: "numeric",nullable: false),CostOfCapital_RROE=table.Column<decimal>(type: "numeric",nullable: false)},constraints: table=>{table.PrimaryKey("PK_Fundamentals",x=>x.Id);table.ForeignKey(name: "FK_Fundamentals_InvestmentInstruments_InvestmentInstrumentId",column: x=>x.InvestmentInstrumentId,principalTable: "InvestmentInstruments",principalColumn: "InvestmentInstrumentId",onDelete: ReferentialAction.Cascade);});migrationBuilder.CreateTable(name: "PriceDataSet",columns: table=>new{Id=table.Column<Guid>(type: "uuid",nullable: false),InvestmentInstrumentId=table.Column<Guid>(type: "uuid",nullable: false),Date=table.Column<DateTime>(type: "date",nullable: false),Open=table.Column<decimal>(type: "numeric(18,2)",nullable: false),High=table.Column<decimal>(type: "numeric(18,2)",nullable: false),Low=table.Column<decimal>(type: "numeric(18,2)",nullable: false),Close=table.Column<decimal>(type: "numeric(18,2)",nullable: false),Volume=table.Column<long>(type: "bigint",nullable: false)},constraints: table=>{table.PrimaryKey("PK_PriceDataSet",x=>x.Id);table.ForeignKey(name: "FK_PriceDataSet_InvestmentInstruments_InvestmentInstrumentId",column: x=>x.InvestmentInstrumentId,principalTable: "InvestmentInstruments",principalColumn: "InvestmentInstrumentId",onDelete: ReferentialAction.Cascade);});migrationBuilder.CreateTable(name: "Recommendations",columns: table=>new{Id=table.Column<Guid>(type: "uuid",nullable: false),InvestmentInstrumentId=table.Column<Guid>(type: "uuid",nullable: false),Action=table.Column<string>(type: "text",nullable: false),Score=table.Column<int>(type: "integer",nullable: false),TimeHorizon=table.Column<string>(type: "text",nullable: false),TargetPrice=table.Column<decimal>(type: "numeric",nullable: false),Rationale=table.Column<string>(type: "text",nullable: false),RiskLevel=table.Column<string>(type: "text",nullable: false)},constraints: table=>{table.PrimaryKey("PK_Recommendations",x=>x.Id);table.ForeignKey(name: "FK_Recommendations_InvestmentInstruments_InvestmentInstrumentId",column: x=>x.InvestmentInstrumentId,principalTable: "InvestmentInstruments",principalColumn: "InvestmentInstrumentId",onDelete: ReferentialAction.Cascade);});migrationBuilder.CreateIndex(name: "IX_Fundamentals_InvestmentInstrumentId",table: "Fundamentals",column: "InvestmentInstrumentId",unique: true);migrationBuilder.CreateIndex(name: "IX_PriceDataSet_InvestmentInstrumentId",table: "PriceDataSet",column: "InvestmentInstrumentId");migrationBuilder.CreateIndex(name: "IX_Recommendations_InvestmentInstrumentId",table: "Recommendations",column: "InvestmentInstrumentId",unique: true);}protected override void Down(MigrationBuilder migrationBuilder){migrationBuilder.DropTable(name: "Fundamentals");migrationBuilder.DropTable(name: "PriceDataSet");migrationBuilder.DropTable(name: "Recommendations");migrationBuilder.DropTable(name: "InvestmentInstruments");}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Migrations\20241219204728_Init.Designer.cs===

using System;using Infrastructure.Data;using Microsoft.EntityFrameworkCore;using Microsoft.EntityFrameworkCore.Infrastructure;using Microsoft.EntityFrameworkCore.Migrations;using Microsoft.EntityFrameworkCore.Storage.ValueConversion;using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;#nullable disable namespace Infrastructure.Migrations{[DbContext(typeof(AppDbContext))] [Migration("20241219204728_Init")] partial class Init{protected override void BuildTargetModel(ModelBuilder modelBuilder){#pragma warning disable 612,618 modelBuilder .HasAnnotation("ProductVersion","9.0.0").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("Domain.Entities.FundamentalData",b=>{b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");b.Property<Guid>("InvestmentInstrumentId").HasColumnType("uuid");b.HasKey("Id");b.HasIndex("InvestmentInstrumentId").IsUnique();b.ToTable("Fundamentals");});modelBuilder.Entity("Domain.Entities.InvestmentInstrument",b=>{b.Property<Guid>("InvestmentInstrumentId").ValueGeneratedOnAdd().HasColumnType("uuid");b.Property<string>("Name").IsRequired().HasMaxLength(200).HasColumnType("character varying(200)");b.Property<string>("Symbol").IsRequired().HasMaxLength(50).HasColumnType("character varying(50)");b.HasKey("InvestmentInstrumentId");b.ToTable("InvestmentInstruments");});modelBuilder.Entity("Domain.Entities.PriceData",b=>{b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");b.Property<decimal>("Close").HasColumnType("decimal(18,2)");b.Property<DateTime>("Date").HasColumnType("date");b.Property<decimal>("High").HasColumnType("decimal(18,2)");b.Property<Guid>("InvestmentInstrumentId").HasColumnType("uuid");b.Property<decimal>("Low").HasColumnType("decimal(18,2)");b.Property<decimal>("Open").HasColumnType("decimal(18,2)");b.Property<long>("Volume").HasColumnType("bigint");b.HasKey("Id");b.HasIndex("InvestmentInstrumentId");b.ToTable("PriceDataSet");});modelBuilder.Entity("Domain.Entities.Recommendation",b=>{b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");b.Property<string>("Action").IsRequired().HasColumnType("text").HasColumnName("Action");b.Property<Guid>("InvestmentInstrumentId").HasColumnType("uuid");b.Property<string>("Rationale").IsRequired().HasColumnType("text").HasColumnName("Rationale");b.Property<string>("RiskLevel").IsRequired().HasColumnType("text").HasColumnName("RiskLevel");b.Property<int>("Score").HasColumnType("integer").HasColumnName("Score");b.Property<decimal>("TargetPrice").HasColumnType("numeric").HasColumnName("TargetPrice");b.Property<string>("TimeHorizon").IsRequired().HasColumnType("text").HasColumnName("TimeHorizon");b.HasKey("Id");b.HasIndex("InvestmentInstrumentId").IsUnique();b.ToTable("Recommendations");});modelBuilder.Entity("Domain.Entities.FundamentalData",b=>{b.HasOne("Domain.Entities.InvestmentInstrument",null).WithOne("FundamentalData").HasForeignKey("Domain.Entities.FundamentalData","InvestmentInstrumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.OwnsOne("Domain.ValueObjects.CashFlowMetrics","CashFlow",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("CurrentFCF").HasColumnType("numeric").HasColumnName("CashFlow_CurrentFCF");b1.Property<decimal>("ProjectedFCFGrowth").HasColumnType("numeric").HasColumnName("CashFlow_ProjectedFCFGrowth");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.ComparableMetrics","Comparable",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("PeerEVEBITDA").HasColumnType("numeric").HasColumnName("Comp_PeerEVEBITDA");b1.Property<decimal>("SectorAveragePE").HasColumnType("numeric").HasColumnName("Comp_SectorAvgPE");b1.Property<decimal>("SectorMedianPB").HasColumnType("numeric").HasColumnName("Comp_SectorMedPB");b1.Property<decimal>("SectorPriceSales").HasColumnType("numeric").HasColumnName("Comp_SectorPriceSales");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.CostOfCapitalMetrics","CostOfCapital",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("RequiredReturnOnEquity").HasColumnType("numeric").HasColumnName("CostOfCapital_RROE");b1.Property<decimal>("WACC").HasColumnType("numeric").HasColumnName("CostOfCapital_WACC");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.DividendMetrics","Dividend",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("CurrentAnnualDividend").HasColumnType("numeric").HasColumnName("Dividend_CurrentAnnual");b1.Property<decimal>("DividendGrowth").HasColumnType("numeric").HasColumnName("Dividend_Growth");b1.Property<decimal>("DividendPayoutRatio").HasColumnType("numeric").HasColumnName("Dividend_PayoutRatio");b1.Property<decimal>("DividendYield").HasColumnType("numeric").HasColumnName("Dividend_Yield");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.EarningsMetrics","Earnings",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("EBITDA").HasColumnType("numeric").HasColumnName("Earnings_EBITDA");b1.Property<decimal>("EPS").HasColumnType("numeric").HasColumnName("Earnings_EPS");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.GrowthMetrics","Growth",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("DividendGrowth").HasColumnType("numeric").HasColumnName("Growth_Dividend");b1.Property<decimal>("HistoricalEpsGrowth").HasColumnType("numeric").HasColumnName("Growth_HistoricalEps");b1.Property<decimal>("LongTermGrowthRate").HasColumnType("numeric").HasColumnName("Growth_LongTerm");b1.Property<decimal>("PredictedEpsGrowth").HasColumnType("numeric").HasColumnName("Growth_PredictedEps");b1.Property<decimal>("PredictedFCFGrowth").HasColumnType("numeric").HasColumnName("Growth_PredictedFCF");b1.Property<decimal>("ProfitGrowth").HasColumnType("numeric").HasColumnName("Growth_Profit");b1.Property<decimal>("RevenueGrowth").HasColumnType("numeric").HasColumnName("Growth_Revenue");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.MarketRiskMetrics","MarketRisk",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("Beta").HasColumnType("numeric").HasColumnName("MarketRisk_Beta");b1.Property<decimal>("SharpeRatio").HasColumnType("numeric").HasColumnName("MarketRisk_SharpeRatio");b1.Property<decimal>("StandardDeviation").HasColumnType("numeric").HasColumnName("MarketRisk_StdDev");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.ProfitabilityMetrics","Profitability",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("GrossMargin").HasColumnType("numeric").HasColumnName("Profitability_GrossMargin");b1.Property<decimal>("NetMargin").HasColumnType("numeric").HasColumnName("Profitability_NetMargin");b1.Property<decimal>("OperatingMargin").HasColumnType("numeric").HasColumnName("Profitability_OperatingMargin");b1.Property<decimal>("ROA").HasColumnType("numeric").HasColumnName("Profitability_ROA");b1.Property<decimal>("ROE").HasColumnType("numeric").HasColumnName("Profitability_ROE");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.RevenueMetrics","Revenue",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("SalesPerShare").HasColumnType("numeric").HasColumnName("Revenue_SalesPerShare");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.SentimentMetrics","Sentiment",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<string>("AnalystRecommendation").IsRequired().HasColumnType("text").HasColumnName("Sentiment_AnalystRec");b1.Property<decimal>("ConsensusTargetPrice").HasColumnType("numeric").HasColumnName("Sentiment_TargetPrice");b1.Property<decimal>("MediaSentimentScore").HasColumnType("numeric").HasColumnName("Sentiment_MediaScore");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.StabilityMetrics","Stability",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("CurrentRatio").HasColumnType("numeric").HasColumnName("Stability_CurrentRatio");b1.Property<decimal>("DebtToEquity").HasColumnType("numeric").HasColumnName("Stability_DebtToEquity");b1.Property<decimal>("InterestCoverage").HasColumnType("numeric").HasColumnName("Stability_InterestCoverage");b1.Property<decimal>("QuickRatio").HasColumnType("numeric").HasColumnName("Stability_QuickRatio");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.ValuationMetrics","Valuation",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("EV_EBIT").HasColumnType("numeric").HasColumnName("Valuation_EVEBIT");b1.Property<decimal>("EV_EBITDA").HasColumnType("numeric").HasColumnName("Valuation_EVEBITDA");b1.Property<decimal>("PB").HasColumnType("numeric").HasColumnName("Valuation_PB");b1.Property<decimal>("PE").HasColumnType("numeric").HasColumnName("Valuation_PE");b1.Property<decimal>("PriceCashFlow").HasColumnType("numeric").HasColumnName("Valuation_PriceCashFlow");b1.Property<decimal>("PriceSales").HasColumnType("numeric").HasColumnName("Valuation_PriceSales");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.Navigation("CashFlow").IsRequired();b.Navigation("Comparable").IsRequired();b.Navigation("CostOfCapital").IsRequired();b.Navigation("Dividend").IsRequired();b.Navigation("Earnings").IsRequired();b.Navigation("Growth").IsRequired();b.Navigation("MarketRisk").IsRequired();b.Navigation("Profitability").IsRequired();b.Navigation("Revenue").IsRequired();b.Navigation("Sentiment").IsRequired();b.Navigation("Stability").IsRequired();b.Navigation("Valuation").IsRequired();});modelBuilder.Entity("Domain.Entities.PriceData",b=>{b.HasOne("Domain.Entities.InvestmentInstrument",null).WithMany("PriceHistory").HasForeignKey("InvestmentInstrumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Domain.Entities.Recommendation",b=>{b.HasOne("Domain.Entities.InvestmentInstrument",null).WithOne("CurrentRecommendation").HasForeignKey("Domain.Entities.Recommendation","InvestmentInstrumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Domain.Entities.InvestmentInstrument",b=>{b.Navigation("CurrentRecommendation").IsRequired();b.Navigation("FundamentalData").IsRequired();b.Navigation("PriceHistory");});#pragma warning restore 612,618}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Migrations\AppDbContextModelSnapshot.cs===

using System;using Infrastructure.Data;using Microsoft.EntityFrameworkCore;using Microsoft.EntityFrameworkCore.Infrastructure;using Microsoft.EntityFrameworkCore.Storage.ValueConversion;using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;#nullable disable namespace Infrastructure.Migrations{[DbContext(typeof(AppDbContext))] partial class AppDbContextModelSnapshot : ModelSnapshot{protected override void BuildModel(ModelBuilder modelBuilder){#pragma warning disable 612,618 modelBuilder .HasAnnotation("ProductVersion","9.0.0").HasAnnotation("Relational:MaxIdentifierLength",63);NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);modelBuilder.Entity("Domain.Entities.FundamentalData",b=>{b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");b.Property<Guid>("InvestmentInstrumentId").HasColumnType("uuid");b.HasKey("Id");b.HasIndex("InvestmentInstrumentId").IsUnique();b.ToTable("Fundamentals");});modelBuilder.Entity("Domain.Entities.InvestmentInstrument",b=>{b.Property<Guid>("InvestmentInstrumentId").ValueGeneratedOnAdd().HasColumnType("uuid");b.Property<string>("Name").IsRequired().HasMaxLength(200).HasColumnType("character varying(200)");b.Property<string>("Symbol").IsRequired().HasMaxLength(50).HasColumnType("character varying(50)");b.HasKey("InvestmentInstrumentId");b.ToTable("InvestmentInstruments");});modelBuilder.Entity("Domain.Entities.PriceData",b=>{b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");b.Property<decimal>("Close").HasColumnType("decimal(18,2)");b.Property<DateTime>("Date").HasColumnType("date");b.Property<decimal>("High").HasColumnType("decimal(18,2)");b.Property<Guid>("InvestmentInstrumentId").HasColumnType("uuid");b.Property<decimal>("Low").HasColumnType("decimal(18,2)");b.Property<decimal>("Open").HasColumnType("decimal(18,2)");b.Property<long>("Volume").HasColumnType("bigint");b.HasKey("Id");b.HasIndex("InvestmentInstrumentId");b.ToTable("PriceDataSet");});modelBuilder.Entity("Domain.Entities.Recommendation",b=>{b.Property<Guid>("Id").ValueGeneratedOnAdd().HasColumnType("uuid");b.Property<string>("Action").IsRequired().HasColumnType("text").HasColumnName("Action");b.Property<Guid>("InvestmentInstrumentId").HasColumnType("uuid");b.Property<string>("Rationale").IsRequired().HasColumnType("text").HasColumnName("Rationale");b.Property<string>("RiskLevel").IsRequired().HasColumnType("text").HasColumnName("RiskLevel");b.Property<int>("Score").HasColumnType("integer").HasColumnName("Score");b.Property<decimal>("TargetPrice").HasColumnType("numeric").HasColumnName("TargetPrice");b.Property<string>("TimeHorizon").IsRequired().HasColumnType("text").HasColumnName("TimeHorizon");b.HasKey("Id");b.HasIndex("InvestmentInstrumentId").IsUnique();b.ToTable("Recommendations");});modelBuilder.Entity("Domain.Entities.FundamentalData",b=>{b.HasOne("Domain.Entities.InvestmentInstrument",null).WithOne("FundamentalData").HasForeignKey("Domain.Entities.FundamentalData","InvestmentInstrumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.OwnsOne("Domain.ValueObjects.CashFlowMetrics","CashFlow",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("CurrentFCF").HasColumnType("numeric").HasColumnName("CashFlow_CurrentFCF");b1.Property<decimal>("ProjectedFCFGrowth").HasColumnType("numeric").HasColumnName("CashFlow_ProjectedFCFGrowth");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.ComparableMetrics","Comparable",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("PeerEVEBITDA").HasColumnType("numeric").HasColumnName("Comp_PeerEVEBITDA");b1.Property<decimal>("SectorAveragePE").HasColumnType("numeric").HasColumnName("Comp_SectorAvgPE");b1.Property<decimal>("SectorMedianPB").HasColumnType("numeric").HasColumnName("Comp_SectorMedPB");b1.Property<decimal>("SectorPriceSales").HasColumnType("numeric").HasColumnName("Comp_SectorPriceSales");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.CostOfCapitalMetrics","CostOfCapital",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("RequiredReturnOnEquity").HasColumnType("numeric").HasColumnName("CostOfCapital_RROE");b1.Property<decimal>("WACC").HasColumnType("numeric").HasColumnName("CostOfCapital_WACC");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.DividendMetrics","Dividend",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("CurrentAnnualDividend").HasColumnType("numeric").HasColumnName("Dividend_CurrentAnnual");b1.Property<decimal>("DividendGrowth").HasColumnType("numeric").HasColumnName("Dividend_Growth");b1.Property<decimal>("DividendPayoutRatio").HasColumnType("numeric").HasColumnName("Dividend_PayoutRatio");b1.Property<decimal>("DividendYield").HasColumnType("numeric").HasColumnName("Dividend_Yield");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.EarningsMetrics","Earnings",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("EBITDA").HasColumnType("numeric").HasColumnName("Earnings_EBITDA");b1.Property<decimal>("EPS").HasColumnType("numeric").HasColumnName("Earnings_EPS");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.GrowthMetrics","Growth",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("DividendGrowth").HasColumnType("numeric").HasColumnName("Growth_Dividend");b1.Property<decimal>("HistoricalEpsGrowth").HasColumnType("numeric").HasColumnName("Growth_HistoricalEps");b1.Property<decimal>("LongTermGrowthRate").HasColumnType("numeric").HasColumnName("Growth_LongTerm");b1.Property<decimal>("PredictedEpsGrowth").HasColumnType("numeric").HasColumnName("Growth_PredictedEps");b1.Property<decimal>("PredictedFCFGrowth").HasColumnType("numeric").HasColumnName("Growth_PredictedFCF");b1.Property<decimal>("ProfitGrowth").HasColumnType("numeric").HasColumnName("Growth_Profit");b1.Property<decimal>("RevenueGrowth").HasColumnType("numeric").HasColumnName("Growth_Revenue");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.MarketRiskMetrics","MarketRisk",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("Beta").HasColumnType("numeric").HasColumnName("MarketRisk_Beta");b1.Property<decimal>("SharpeRatio").HasColumnType("numeric").HasColumnName("MarketRisk_SharpeRatio");b1.Property<decimal>("StandardDeviation").HasColumnType("numeric").HasColumnName("MarketRisk_StdDev");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.ProfitabilityMetrics","Profitability",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("GrossMargin").HasColumnType("numeric").HasColumnName("Profitability_GrossMargin");b1.Property<decimal>("NetMargin").HasColumnType("numeric").HasColumnName("Profitability_NetMargin");b1.Property<decimal>("OperatingMargin").HasColumnType("numeric").HasColumnName("Profitability_OperatingMargin");b1.Property<decimal>("ROA").HasColumnType("numeric").HasColumnName("Profitability_ROA");b1.Property<decimal>("ROE").HasColumnType("numeric").HasColumnName("Profitability_ROE");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.RevenueMetrics","Revenue",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("SalesPerShare").HasColumnType("numeric").HasColumnName("Revenue_SalesPerShare");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.SentimentMetrics","Sentiment",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<string>("AnalystRecommendation").IsRequired().HasColumnType("text").HasColumnName("Sentiment_AnalystRec");b1.Property<decimal>("ConsensusTargetPrice").HasColumnType("numeric").HasColumnName("Sentiment_TargetPrice");b1.Property<decimal>("MediaSentimentScore").HasColumnType("numeric").HasColumnName("Sentiment_MediaScore");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.StabilityMetrics","Stability",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("CurrentRatio").HasColumnType("numeric").HasColumnName("Stability_CurrentRatio");b1.Property<decimal>("DebtToEquity").HasColumnType("numeric").HasColumnName("Stability_DebtToEquity");b1.Property<decimal>("InterestCoverage").HasColumnType("numeric").HasColumnName("Stability_InterestCoverage");b1.Property<decimal>("QuickRatio").HasColumnType("numeric").HasColumnName("Stability_QuickRatio");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.OwnsOne("Domain.ValueObjects.ValuationMetrics","Valuation",b1=>{b1.Property<Guid>("FundamentalDataId").HasColumnType("uuid");b1.Property<decimal>("EV_EBIT").HasColumnType("numeric").HasColumnName("Valuation_EVEBIT");b1.Property<decimal>("EV_EBITDA").HasColumnType("numeric").HasColumnName("Valuation_EVEBITDA");b1.Property<decimal>("PB").HasColumnType("numeric").HasColumnName("Valuation_PB");b1.Property<decimal>("PE").HasColumnType("numeric").HasColumnName("Valuation_PE");b1.Property<decimal>("PriceCashFlow").HasColumnType("numeric").HasColumnName("Valuation_PriceCashFlow");b1.Property<decimal>("PriceSales").HasColumnType("numeric").HasColumnName("Valuation_PriceSales");b1.HasKey("FundamentalDataId");b1.ToTable("Fundamentals");b1.WithOwner().HasForeignKey("FundamentalDataId");});b.Navigation("CashFlow").IsRequired();b.Navigation("Comparable").IsRequired();b.Navigation("CostOfCapital").IsRequired();b.Navigation("Dividend").IsRequired();b.Navigation("Earnings").IsRequired();b.Navigation("Growth").IsRequired();b.Navigation("MarketRisk").IsRequired();b.Navigation("Profitability").IsRequired();b.Navigation("Revenue").IsRequired();b.Navigation("Sentiment").IsRequired();b.Navigation("Stability").IsRequired();b.Navigation("Valuation").IsRequired();});modelBuilder.Entity("Domain.Entities.PriceData",b=>{b.HasOne("Domain.Entities.InvestmentInstrument",null).WithMany("PriceHistory").HasForeignKey("InvestmentInstrumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Domain.Entities.Recommendation",b=>{b.HasOne("Domain.Entities.InvestmentInstrument",null).WithOne("CurrentRecommendation").HasForeignKey("Domain.Entities.Recommendation","InvestmentInstrumentId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Domain.Entities.InvestmentInstrument",b=>{b.Navigation("CurrentRecommendation").IsRequired();b.Navigation("FundamentalData").IsRequired();b.Navigation("PriceHistory");});#pragma warning restore 612,618}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Services\DataAcquisitionService.cs===

using System;using System.Linq;using System.Threading.Tasks;using Domain.Interfaces;using Infrastructure.Adapters.APIs;using Microsoft.Extensions.Logging;using System.Text.Json;using Infrastructure.Adapters.Mappers;namespace Infrastructure.Services{public class DataAcquisitionService : IDataAcquisitionService{private readonly IAlphaVantageClient _alphaVantageClient;private readonly IFinnhubClient _finnhubClient;private readonly IIEXCloudClient _iexCloudClient;private readonly IInvestmentInstrumentRepository _instrumentRepository;private readonly ILogger<DataAcquisitionService>_logger;public DataAcquisitionService(IAlphaVantageClient alphaVantageClient,IFinnhubClient finnhubClient,IIEXCloudClient iexCloudClient,IInvestmentInstrumentRepository instrumentRepository,ILogger<DataAcquisitionService>logger){_alphaVantageClient=alphaVantageClient;_finnhubClient=finnhubClient;_iexCloudClient=iexCloudClient;_instrumentRepository=instrumentRepository;_logger=logger;}public async Task FullUpdateAsync(string symbol){await UpdatePriceDataAsync(symbol);await UpdateFundamentalsAsync(symbol);await UpdateSentimentAndEstimatesAsync(symbol);}public async Task UpdatePriceDataAsync(string symbol){try{var json=await _alphaVantageClient.GetDailyPricesAsync(symbol);var doc=JsonDocument.Parse(json);if(!doc.RootElement.TryGetProperty("Time Series(Daily)",out var timeSeries)){_logger.LogWarning("Time Series not found for{Symbol}in AlphaVantage response.",symbol);return;}var instrument=await _instrumentRepository.GetBySymbolAsync(symbol);if(instrument==null){instrument=new Domain.Entities.InvestmentInstrument(symbol,symbol);await _instrumentRepository.AddAsync(instrument);}foreach(var day in timeSeries.EnumerateObject()){DateTime date=DateTime.Parse(day.Name);var priceData=ExternalDataToDomainMapper.MapPriceData(day.Value,date);instrument.AddPriceData(priceData);}await _instrumentRepository.UpdateAsync(instrument);_logger.LogInformation("Price data updated for{Symbol}from AlphaVantage.",symbol);}catch(Exception ex){_logger.LogError(ex,"Failed to update price data for{Symbol}.",symbol);}}public async Task UpdateFundamentalsAsync(string symbol){try{var json=await _finnhubClient.GetCompanyProfileAsync(symbol);var doc=JsonDocument.Parse(json);var instrument=await _instrumentRepository.GetBySymbolAsync(symbol);if(instrument==null){instrument=new Domain.Entities.InvestmentInstrument(symbol,symbol);await _instrumentRepository.AddAsync(instrument);}var fundamentals=ExternalDataToDomainMapper.MapFundamentalData(doc.RootElement);instrument.UpdateFundamentalData(fundamentals);await _instrumentRepository.UpdateAsync(instrument);_logger.LogInformation("Fundamentals updated for{Symbol}from Finnhub.",symbol);}catch(Exception ex){_logger.LogError(ex,"Failed to update fundamentals for{Symbol}.",symbol);}}public async Task UpdateSentimentAndEstimatesAsync(string symbol){try{var json=await _iexCloudClient.GetQuoteAsync(symbol);var doc=JsonDocument.Parse(json);var instrument=await _instrumentRepository.GetBySymbolAsync(symbol);if(instrument==null){instrument=new Domain.Entities.InvestmentInstrument(symbol,symbol);await _instrumentRepository.AddAsync(instrument);}var updatedFundamentals=ExternalDataToDomainMapper.MapSentimentAndEstimates(instrument.FundamentalData,doc.RootElement);instrument.UpdateFundamentalData(updatedFundamentals);await _instrumentRepository.UpdateAsync(instrument);_logger.LogInformation("Sentiment and estimates updated for{Symbol}from IEX Cloud.",symbol);}catch(Exception ex){_logger.LogError(ex,"Failed to update sentiment/estimates for{Symbol}.",symbol);}}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Infrastructure\Infrastructure.csproj===

<Project Sdk="Microsoft.NET.Sdk"><PropertyGroup><TargetFramework>net9.0</TargetFramework><ImplicitUsings>enable</ImplicitUsings><Nullable>enable</Nullable></PropertyGroup><ItemGroup><PackageReference Include="AutoMapper" Version="13.0.1"/><PackageReference Include="FluentValidation" Version="11.11.0"/><PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.0"/><PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="9.0.2"/><PackageReference Include="Polly" Version="8.5.0"/><PackageReference Include="Polly.Extensions.Http" Version="3.0.0"/><PackageReference Include="Serilog.AspNetCore" Version="9.0.0"/><PackageReference Include="Serilog.Sinks.Console" Version="6.0.0"/></ItemGroup><ItemGroup><ProjectReference Include="..\InvestmentAdvisor.Application\Application.csproj"/></ItemGroup></Project>

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Tests\DataAcquisitionServiceTests.cs===

using Domain.Entities;using Domain.Interfaces;using Domain.ValueObjects;using Infrastructure.Adapters.APIs;using Infrastructure.Services;using Microsoft.Extensions.Logging;using Moq;using Xunit;namespace Tests{public class DataAcquisitionServiceTests{private readonly Mock<IAlphaVantageClient>_alphaMock;private readonly Mock<IFinnhubClient>_finnhubMock;private readonly Mock<IIEXCloudClient>_iexMock;private readonly Mock<IInvestmentInstrumentRepository>_repoMock;private readonly Mock<ILogger<DataAcquisitionService>>_loggerMock;private readonly DataAcquisitionService _dataService;public DataAcquisitionServiceTests(){_alphaMock=new Mock<IAlphaVantageClient>();_finnhubMock=new Mock<IFinnhubClient>();_iexMock=new Mock<IIEXCloudClient>();_repoMock=new Mock<IInvestmentInstrumentRepository>();_loggerMock=new Mock<ILogger<DataAcquisitionService>>();_dataService=new DataAcquisitionService(_alphaMock.Object,_finnhubMock.Object,_iexMock.Object,_repoMock.Object,_loggerMock.Object);}[Fact] public async Task UpdatePriceDataAsync_ValidResponse_UpdatesRepository(){string json=@"{""Time Series(Daily)"":{""2024-12-20"":{""1. open"": ""100.00"",""2. high"": ""105.00"",""3. low"": ""95.00"",""4. close"": ""102.00"",""5. volume"": ""1000000""}}}";var instrument=new InvestmentInstrument("TEST","Test Company");_repoMock.Setup(r=>r.GetBySymbolAsync("TEST")).ReturnsAsync(instrument);_alphaMock.Setup(a=>a.GetDailyPricesAsync("TEST","compact")).ReturnsAsync(json);await _dataService.UpdatePriceDataAsync("TEST");Assert.Single(instrument.PriceHistory);Assert.Equal(102m,instrument.PriceHistory.First().Close);_repoMock.Verify(r=>r.UpdateAsync(instrument),Times.Once);}[Fact] public async Task UpdateFundamentalsAsync_ValidData_MapsAndSavesFundamentals(){string json=@"{""peRatio"": 15.0,""pbRatio"": 2.0,""evToEbitda"": 10.0,""priceToSales"": 3.0,""epsGrowth5Y"": 0.05,""epsGrowth1Y"": 0.06,""revenueGrowth5Y"": 0.03,""returnOnEquity"": 0.15,""returnOnAssets"": 0.10,""grossMargin"": 0.40,""operatingMargin"": 0.20,""netProfitMargin"": 0.10,""debtToEquity"": 0.5,""currentRatio"": 1.5,""interestCoverage"": 4.0,""dividendYield"": 0.03,""payoutRatio"": 0.5,""annualDividend"": 2.0,""beta"": 1.0,""targetPrice"": 120.0,""analystRecommendation"": ""Buy"",""sectorPE"": 14,""sectorPB"": 2,""sectorEVEBITDA"": 12,""sectorPriceSales"": 3,""eps"": 5,""ebitda"": 500,""salesPerShare"": 50,""freeCashFlow"": 100}";var instrument=new InvestmentInstrument("TEST","Test Company");_repoMock.Setup(r=>r.GetBySymbolAsync("TEST")).ReturnsAsync(instrument);_finnhubMock.Setup(f=>f.GetCompanyProfileAsync("TEST")).ReturnsAsync(json);await _dataService.UpdateFundamentalsAsync("TEST");Assert.NotNull(instrument.FundamentalData);Assert.Equal(15.0m,instrument.FundamentalData.Valuation.PE);_repoMock.Verify(r=>r.UpdateAsync(instrument),Times.Once);}[Fact] public async Task UpdateSentimentAndEstimatesAsync_ValidData_UpdatesSentiment(){string json=@"{""targetPrice"": 130.0,""recommendation"": ""StrongBuy"",""mediaSentiment"": 0.9}";var fundamentalData=new FundamentalData(new ValuationMetrics(10,2,8,7,2,10),new GrowthMetrics(0.05m,0.05m,0.05m,0.05m,0.02m,0.05m,0.03m),new ProfitabilityMetrics(0.15m,0.10m,0.40m,0.20m,0.10m),new StabilityMetrics(0.5m,1.5m,1.2m,4m),new DividendMetrics(0.03m,0.5m,0.02m,2m),new MarketRiskMetrics(1.0m,0.5m,0.2m),new SentimentMetrics(120m,"Buy",0.8m),new ComparableMetrics(15m,2m,12m,3m),new EarningsMetrics(5m,500m),new RevenueMetrics(50m),new CashFlowMetrics(100m,0.05m),new CostOfCapitalMetrics(0.08m,0.10m));var instrument=new InvestmentInstrument("TEST","Test Company");instrument.UpdateFundamentalData(fundamentalData);_repoMock.Setup(r=>r.GetBySymbolAsync("TEST")).ReturnsAsync(instrument);_iexMock.Setup(i=>i.GetQuoteAsync("TEST")).ReturnsAsync(json);await _dataService.UpdateSentimentAndEstimatesAsync("TEST");Assert.Equal(130m,instrument.FundamentalData.Sentiment.ConsensusTargetPrice);Assert.Equal("StrongBuy",instrument.FundamentalData.Sentiment.AnalystRecommendation);Assert.Equal(0.9m,instrument.FundamentalData.Sentiment.MediaSentimentScore);_repoMock.Verify(r=>r.UpdateAsync(instrument),Times.Once);}[Fact] public async Task UpdatePriceDataAsync_InvalidResponse_GracefullyHandlesError(){string json=@"{""Error"": ""Invalid symbol""}";var instrument=new InvestmentInstrument("TEST","Test Company");_repoMock.Setup(r=>r.GetBySymbolAsync("TEST")).ReturnsAsync(instrument);_alphaMock.Setup(a=>a.GetDailyPricesAsync("TEST","compact")).ReturnsAsync(json);await _dataService.UpdatePriceDataAsync("TEST");Assert.Empty(instrument.PriceHistory);_repoMock.Verify(r=>r.UpdateAsync(instrument),Times.Never);}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Tests\RecommendationServiceTests.cs===

using Domain.Entities;using Domain.Interfaces;using Domain.Services;using Domain.ValueObjects;using Moq;namespace Tests{public class RecommendationServiceTests{private readonly Mock<IValuationService>_valuationServiceMock;private readonly RecommendationService _recommendationService;public RecommendationServiceTests(){_valuationServiceMock=new Mock<IValuationService>();_recommendationService=new RecommendationService(_valuationServiceMock.Object);}[Fact] public void GenerateRecommendation_IntrinsicMuchHigherThanMarket_StrongBuy(){var instrument=CreateInstrumentWithPrice(100m);_valuationServiceMock.Setup(v=>v.CalculateIntrinsicValue(instrument)).Returns(130m);var rec=_recommendationService.GenerateRecommendation(instrument);Assert.Equal(RecommendationAction.StrongBuy,rec.Action);Assert.True(rec.Score==1);}[Fact] public void GenerateRecommendation_IntrinsicSlightlyHigher_Accumulate(){var instrument=CreateInstrumentWithPrice(100m);_valuationServiceMock.Setup(v=>v.CalculateIntrinsicValue(instrument)).Returns(105m);var rec=_recommendationService.GenerateRecommendation(instrument);Assert.Equal(RecommendationAction.Accumulate,rec.Action);Assert.Equal(3,rec.Score);}[Fact] public void GenerateRecommendation_IntrinsicLowerMinus15Percent_Sell(){var instrument=CreateInstrumentWithPrice(100m);_valuationServiceMock.Setup(v=>v.CalculateIntrinsicValue(instrument)).Returns(85m);var rec=_recommendationService.GenerateRecommendation(instrument);Assert.Equal(RecommendationAction.Sell,rec.Action);Assert.Equal(6,rec.Score);}[Fact] public void GenerateRecommendation_HighBeta_UpdatesRiskLevelHigh(){var instrument=CreateInstrumentWithPrice(100m,beta: 1.5m);_valuationServiceMock.Setup(v=>v.CalculateIntrinsicValue(instrument)).Returns(130m);var rec=_recommendationService.GenerateRecommendation(instrument);Assert.Equal("Vysoké",rec.RiskLevel);}private InvestmentInstrument CreateInstrumentWithPrice(decimal price,decimal beta=1.0m){var fundamentalData=new FundamentalData(valuation: new ValuationMetrics(10m,2m,8m,7m,2m,10m),growth: new GrowthMetrics(0.05m,0.05m,0.05m,0.05m,0.02m,0.05m,0.03m),profitability: new ProfitabilityMetrics(0.15m,0.10m,0.40m,0.20m,0.10m),stability: new StabilityMetrics(0.5m,1.5m,1.2m,4m),dividend: new DividendMetrics(0.03m,0.5m,0.02m,2m),marketRisk: new MarketRiskMetrics(beta,0.5m,0.2m),sentiment: new SentimentMetrics(120m,"Buy",0.8m),comparable: new ComparableMetrics(15m,2m,12m,3m),earnings: new EarningsMetrics(5m,500m),revenue: new RevenueMetrics(50m),cashFlow: new CashFlowMetrics(100m,0.05m),costOfCapital: new CostOfCapitalMetrics(0.08m,0.10m));var instrument=new InvestmentInstrument("TEST","Test Company");instrument.UpdateFundamentalData(fundamentalData);instrument.AddPriceData(new PriceData(DateTime.UtcNow,price,price,price,price,1000000));return instrument;}}}

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Tests\Tests.csproj===

<Project Sdk="Microsoft.NET.Sdk"><PropertyGroup><TargetFramework>net9.0</TargetFramework><ImplicitUsings>enable</ImplicitUsings><Nullable>enable</Nullable><IsPackable>false</IsPackable></PropertyGroup><ItemGroup><PackageReference Include="coverlet.collector" Version="6.0.2"/><PackageReference Include="FluentAssertions" Version="7.0.0"/><PackageReference Include="Microsoft.EntityFrameworkCore.InMemory" Version="9.0.0"/><PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.12.0"/><PackageReference Include="Moq" Version="4.20.72"/><PackageReference Include="xunit" Version="2.9.2"/><PackageReference Include="xunit.runner.visualstudio" Version="3.0.0"><PrivateAssets>all</PrivateAssets><IncludeAssets>runtime;build;native;contentfiles;analyzers;buildtransitive</IncludeAssets></PackageReference></ItemGroup><ItemGroup><ProjectReference Include="..\InvestmentAdvisor.Application\Application.csproj"/><ProjectReference Include="..\InvestmentAdvisor.Infrastructure\Infrastructure.csproj"/></ItemGroup><ItemGroup><Using Include="Xunit"/></ItemGroup></Project>

===File:C:\Users\jiranek\source\repos\InvestmentAdvisor\InvestmentAdvisor.Tests\ValuationServiceTests.cs===

using Domain.Entities;using Domain.Interfaces;using Domain.Services;using Domain.ValueObjects;using Infrastructure.Adapters.APIs;using Infrastructure.Services;using Microsoft.Extensions.Logging;using Moq;namespace InvestmentAdvisor.Tests{public class ValuationServiceTests{private readonly ValuationService _valuationService;public ValuationServiceTests(){_valuationService=new ValuationService();}[Fact] public void CalculateIntrinsicValue_StandardInput_ReturnsReasonableValue(){var instrument=CreateMockInstrument(currentFCF: 100m,predictedFCFGrowth: 0.05m,wacc: 0.08m,requiredRoe: 0.10m,dividend: 2m,dividendGrowth: 0.02m,pe: 15m,sectorPE: 14m);var value=_valuationService.CalculateIntrinsicValue(instrument);Assert.True(value>0,"Hodnota musí být kladná");Assert.True(value<20000,"Hodnota musí být realistická,ne extrémně vysoká");}[Fact] public void CalculateIntrinsicValue_HighGrowthLowWacc_ProducesHighIntrinsicValue(){var instrument=CreateMockInstrument(currentFCF: 10000m,predictedFCFGrowth: 0.10m,wacc: 0.05m,requiredRoe: 0.09m,dividend: 0m,dividendGrowth: 0m,pe: 20m,sectorPE: 15m);var value=_valuationService.CalculateIntrinsicValue(instrument);Assert.True(value>500000,"Hodnota by měla být extrémně vysoká");}[Fact] public void CalculateIntrinsicValue_NearZeroFcfHighWacc_ProducesVeryLowValue(){var instrument=CreateMockInstrument(currentFCF: 1m,predictedFCFGrowth: 0.0m,wacc: 0.20m,requiredRoe: 0.20m,dividend: 0m,dividendGrowth: 0m,pe: 50m,sectorPE: 25m);var value=_valuationService.CalculateIntrinsicValue(instrument);Assert.True(value<10,"Hodnota by měla být téměř nulová");}private InvestmentInstrument CreateMockInstrument(decimal currentFCF,decimal predictedFCFGrowth,decimal wacc,decimal requiredRoe,decimal dividend,decimal dividendGrowth,decimal pe,decimal sectorPE){var fundamentalData=new FundamentalData(valuation: new ValuationMetrics(PE: pe,PB: 2m,EV_EBITDA: 10m,EV_EBIT: 9m,PriceSales: 3m,PriceCashFlow: 15m),growth: new GrowthMetrics(HistoricalEpsGrowth: 0.05m,PredictedEpsGrowth: 0.05m,RevenueGrowth: 0.05m,ProfitGrowth: 0.05m,DividendGrowth: dividendGrowth,PredictedFCFGrowth: predictedFCFGrowth,LongTermGrowthRate: 0.03m),profitability: new ProfitabilityMetrics(0.15m,0.10m,0.40m,0.20m,0.10m),stability: new StabilityMetrics(0.5m,1.5m,1.2m,4m),dividend: new DividendMetrics(DividendYield: 0.03m,DividendPayoutRatio: 0.5m,DividendGrowth: dividendGrowth,CurrentAnnualDividend: dividend),marketRisk: new MarketRiskMetrics(Beta: 1.0m,SharpeRatio: 0.5m,StandardDeviation: 0.2m),sentiment: new SentimentMetrics(ConsensusTargetPrice: 120m,AnalystRecommendation: "Buy",MediaSentimentScore: 0.8m),comparable: new ComparableMetrics(SectorAveragePE: sectorPE,SectorMedianPB: 2m,PeerEVEBITDA: 12m,SectorPriceSales: 3m),earnings: new EarningsMetrics(EPS: 5m,EBITDA: 500m),revenue: new RevenueMetrics(SalesPerShare: 50m),cashFlow: new CashFlowMetrics(CurrentFCF: currentFCF,ProjectedFCFGrowth: predictedFCFGrowth),costOfCapital: new CostOfCapitalMetrics(WACC: wacc,RequiredReturnOnEquity: requiredRoe));var instrument=new InvestmentInstrument("TEST","Test Company");instrument.UpdateFundamentalData(fundamentalData);instrument.AddPriceData(new PriceData(DateTime.UtcNow,100,110,90,100,1000000));return instrument;}}}

